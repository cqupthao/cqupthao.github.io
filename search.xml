<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go Web 编程原理</title>
      <link href="/posts/54137.html"/>
      <url>/posts/54137.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Web-服务器"><a class="header-anchor" href="#Web-服务器">☃</a>Web 服务器</h1><hr><hr><h2 id="Web-服务器的工作过程"><a class="header-anchor" href="#Web-服务器的工作过程">☃</a>Web 服务器的工作过程</h2><hr><p>一个 Web 服务器也被称为 HTTP 服务器，它通过 HTTP 协议与客户端进行通信。客户端与服务器之间的通信是非持久连接的，当服务器发送了应答后就与客户端断开连接，等待下一次请求。</p><blockquote><p>浏览器本身是一个客户端，根据用户输入的 URL ，浏览器首先会请求 DNS 服务器，通过 DNS 获取相应域名对应的 IP 。</p></blockquote><blockquote><p>通过 IP 地址找到 IP 对应的服务器后，建立 TCP 连接。</p></blockquote><blockquote><p>浏览器发送完 HTTP Request（请求）包，服务器接收到请求包之后才开始处理请求包，服务器调用自身服务，返回 HTTP Response（响应）包。</p></blockquote><blockquote><p>客户端收到来自服务器的响应后开始渲染该 Response 包里的主体（body），客户端收到全部的内容后，断开与该服务器之间的TCP连接。</p></blockquote><hr><p><img src="https://tao7app.files.wordpress.com/2023/01/img_20230105_132934.jpg" alt="访问一个Web站点的过程"></p><ul><li><p>客户端通过 TCP/IP 协议建立到服务器的 TCP 连接。</p></li><li><p>客户端向服务器发送 HTTP 协议请求包，请求服务器里的资源文档。</p></li><li><p>服务器向客户机发送 HTTP 协议应答包，如果请求的资源包含有动态语言的内容，那么服务器会调用动态语言的解释引擎负责处理“动态内容”，并将处理得到的数据返回给客户端。</p></li><li><p>客户端与服务器断开，由客户端解释 HTML 文档，在客户端屏幕上渲染图形结果。</p></li></ul><hr><h2 id="URI-URL-和-DNS-解析"><a class="header-anchor" href="#URI-URL-和-DNS-解析">☃</a>URI , URL 和 DNS 解析</h2><hr><h3 id="URI"><a class="header-anchor" href="#URI">☃</a><strong>URI</strong></h3><p>URI (Uniform Resource Identifier，统一资源标志符)，用来标识 Web 上每一种可用资源，例如： HTML 文档、图像、视频片段、程序等都由一个 URI 进行标识。</p><p>URI 通常由资源的命名机制，标准存放资源的主机名，资源自身的名称组成。</p><h3 id="URL"><a class="header-anchor" href="#URL">☃</a><strong>URL</strong></h3><p>URL（Uniform Resource Locator，统一资源定位符）用于描述一个网络上的资源，基本格式如下：</p><p><code>scheme://host[:port#]/path/.../[?query-string][#anchor]</code></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">scheme        // 指定低层使用的协议（例如：http, https, ftp）host          // HTTP 服务器的 IP 地址或者域名port          // HTTP 服务器的默认端口是 80（可以省略），如果使用了别的端口，必须指明，例如 http://cqupt.edu.cn:8080/    path         // 访问资源的路径 query-string  // 发送给 http 服务器的数据 anchor        // 锚<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Go 语言中，URL 结构体的定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> URI <span class="token keyword">struct</span> <span class="token punctuation">{</span>Scheme <span class="token builtin">string</span>     <span class="token comment">// 方案</span>Opaque <span class="token builtin">string</span>     <span class="token comment">// 编码后的不透明数据</span>User <span class="token operator">*</span>Userinfo    <span class="token comment">// 基本验证方式中 username 和 password 信息 </span>Host <span class="token builtin">string</span>       <span class="token comment">// 主机字段请求头</span>Path <span class="token builtin">string</span>       <span class="token comment">// 路径</span>RawPath <span class="token builtin">string</span>ForceQuery <span class="token builtin">bool</span> RawQuery <span class="token builtin">string</span>   <span class="token comment">// 查询字段</span>Fragment <span class="token builtin">string</span>   <span class="token comment">// 分片字段 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DNS-解析"><a class="header-anchor" href="#DNS-解析">☃</a><strong>DNS 解析</strong></h3><p>DNS（Domain Name System）是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，用于 TCP/IP 网络，将主机名或域名转换为实际 IP 地址。</p><hr><p><img src="https://tao7app.files.wordpress.com/2023/01/img_20230105_132951.jpg" alt="DNS工作原理"></p><hr><p><img src="https://tao7app.files.wordpress.com/2023/01/img_20230105_133012.jpg" alt="DNS解析的整个流程"></p><ul><li><p>在浏览器中输入 <code>www.qq.com</code> 域名，操作系统会先检查自己本地的 <code>hosts</code> 文件是否有这个网址映射关系，如果有，就先调用这个 IP 地址映射，完成域名解析。</p></li><li><p>如果 <code>hosts</code> 里没有这个域名的映射，则查找本地 DNS 解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</p></li><li><p>如果 <code>hosts</code> 与本地 DNS 解析器缓存都没有相应的网址映射关系，首先会找 TCP/IP 参数中设置的首选 DNS 服务器（本地 DNS 服务器），当此服务器收到查询时，如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</p></li><li><p>如果要查询的域名，不由本地 DNS 服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个 IP 地址映射，完成域名解析，此解析不具有权威性。</p></li><li><p>如果本地 DNS 服务器本地区域文件与缓存解析都失效，则根据本地 DNS 服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地 DNS 就把请求发至 “根 DNS 服务器”，“根 DNS 服务器”收到请求后会判断这个域名（<code>.com</code>）由谁来授权管理，并会返回一个负责该顶级域名服务器的一个 IP 。本地 DNS 服务器收到 IP 信息后，将会联系负责 <code>.com</code> 域的这台服务器。这台负责 <code>.com</code> 域的服务器收到请求后，如果自己无法解析，它就会找一个管理 <code>.com</code> 域的下一级 DNS 服务器地址（<code>qq.com</code>）给本地 DNS 服务器。当本地 DNS 服务器收到这个地址后，就会找 <code>qq.com</code> 域服务器，重复上面的动作，进行查询，直至找到 <code>www.qq.com</code> 主机。</p></li><li><p>如果用的是转发模式，此 DNS 服务器就会把请求转发至上一级 DNS 服务器，由上一级服务器进行解析，上一级服务器如果不能解析，找根 DNS 或把转请求转至上上级，以此循环。不管是本地 DNS 服务器用是否转发，还是根提示，最后都是把结果返回给本地 DNS 服务器，由此 DNS 服务器再返回给客户机。</p></li></ul><p>通过上面的步骤，最后获取的是 IP 地址，即浏览器最后发起请求的时候是基于 IP 来和服务器做信息交互的。</p><hr><h2 id="HTTP-协议"><a class="header-anchor" href="#HTTP-协议">☃</a>HTTP 协议</h2><hr><h3 id="HTTP-协议的基本概念"><a class="header-anchor" href="#HTTP-协议的基本概念">☃</a>HTTP 协议的基本概念</h3><p>超文本传输协议（HTTP）是分布式、协作的、超媒体信息系统的应用层协议。HTTP 是一种让 Web服务器与浏览器（客户端）通过 Internet 发送与接收数据的协议，它建立在 TCP 协议之上，一般采用 TCP 的 <code>80</code> 端口，是一个无状态的请求/响应协议。</p><p>在 HTTP 协议中，客户端总是通过建立一个连接与发送一个 HTTP 请求来发起一个事务。服务器不能主动去与客户端联系，也不能给客户端发出一个回调连接，客户端与服务器端都可以提前中断一个连接。</p><h3 id="HTTP-请求"><a class="header-anchor" href="#HTTP-请求">☃</a>HTTP 请求</h3><p>客户端发送到服务器端的请求信息由请求行（Request Line），请求（Request Header），请求体（Request Body）组成。 header 和 body 之间有个空行。</p><ul><li><strong>请求行</strong></li></ul><p>请求行由请求方法、URI 、HTTP 协议/协议版本组成。</p><table><thead><tr><th style="text-align:center">请求方法</th><th style="text-align:left">方法描述</th></tr></thead><tbody><tr><td style="text-align:center">GET</td><td style="text-align:left">请求页面，并返回页面内容</td></tr><tr><td style="text-align:center">HEAD</td><td style="text-align:left">类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td style="text-align:center">POST</td><td style="text-align:left">大多用于提交表单或上传文件，数据包含在请求体中</td></tr><tr><td style="text-align:center">PUT</td><td style="text-align:left">从客户端向服务器传送的数据取代指定文档中的内容</td></tr><tr><td style="text-align:center">DELETE</td><td style="text-align:left">请求服务器删除指定的资源</td></tr><tr><td style="text-align:center">OPTIONS</td><td style="text-align:left">允许客户端查看服务器的性能</td></tr><tr><td style="text-align:center">CONNECT</td><td style="text-align:left">把服务器当作跳板，让服务器代替客户端访问其他网页</td></tr><tr><td style="text-align:center">TRACE</td><td style="text-align:left">回显服务器收到的请求，主要用于测试或诊断</td></tr></tbody></table><p>一个 URL 地址用于描述一个网络上的资源，而 HTTP 中的 GET、POST、PUT、DELETE 对应着对这个资源的查、改、增、删 4 个操作。</p><hr><p>GET 和 POST 的区别：</p><ul><li><p>GET 一般用于获取/查询资源信息，而 POST 一般用于更新资源信息。GET请求消息体为空，POST请求带有消息体。</p></li><li><p>GET 提交的数据会放在 URL 之后，以 ? 分割 URL 和传输数据，参数之间以 &amp; 相连，如<code>EditPosts.aspx?name=test1&amp;id=123456</code> 。POST 方法是把提交的数据放在 HTTP 包的 Body 中。</p></li><li><p>GET 提交的数据大小有限制（因为浏览器对 URL 的长度有限制），而 POST 方法提交的数据没有限制。</p></li><li><p>GET 方式提交数据，会带来安全问题，比如一个登录页面，通过 GET 方式提交数据时，用户名和密码将出现在 URL 上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。</p></li></ul><hr><ul><li><strong>请求头</strong></li></ul><p>请求头包含服务器要使用的附加信息（Cookie 、 Referer 、 User-Agent等）。</p><table><thead><tr><th style="text-align:left">请求头</th><th style="text-align:left">示 例</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Accept</td><td style="text-align:left">Accept: text/plain,text/html</td><td style="text-align:left">指定客户端能够接收的内容类型</td></tr><tr><td style="text-align:left">Accept-Charset</td><td style="text-align:left">Accept-Charset: iso-8859-5</td><td style="text-align:left">字符编码集</td></tr><tr><td style="text-align:left">Accept-Encoding</td><td style="text-align:left">Accept-Encoding: compress,gzip</td><td style="text-align:left">指定浏览器可以支持的 Web 服务器返回内容压缩编码类型</td></tr><tr><td style="text-align:left">Accept-Language</td><td style="text-align:left">Accept-Language:en,zh</td><td style="text-align:left">浏览器可接受的语言</td></tr><tr><td style="text-align:left">Accept-Ranges</td><td style="text-align:left">Accept-Ranges: bytes</td><td style="text-align:left">可以请求网页实体的子范围字段</td></tr><tr><td style="text-align:left">Authorization</td><td style="text-align:left">Authorization: BasicdbxhZGRpbjpvcGVuIHNIc2Ftyd=</td><td style="text-align:left">HTTP 授权的授权证书</td></tr><tr><td style="text-align:left">Cache-Control</td><td style="text-align:left">Cache-Control:no-cache</td><td style="text-align:left">指定请求和响应遵循的缓存机制</td></tr><tr><td style="text-align:left">Connection</td><td style="text-align:left">Connection: close</td><td style="text-align:left">表示是否需要持久连接。（HTTP1.1默认进行持久连接）</td></tr><tr><td style="text-align:left">Cookie</td><td style="text-align:left">Cookie: $Version=1; Skin=new;</td><td style="text-align:left">请求域名下的所有 cookie 值</td></tr><tr><td style="text-align:left">Content-Length</td><td style="text-align:left">Content-Length:348</td><td style="text-align:left">请求的内容长度</td></tr></tbody></table><ul><li><strong>请求体</strong></li></ul><p>请求体是指在 HTTP 请求中传输数据的实体，常用于 POST 、 PUT 等请求中。</p><h3 id="HTTP-响应"><a class="header-anchor" href="#HTTP-响应">☃</a>HTTP 响应</h3><p>HTTP 响应由服务器端返回给客户端，分为响应状态码（Response Status Code）,响应头（Response Header）和响应体（Response Body）。</p><ul><li><strong>状态码</strong></li></ul><p>状态码用来告诉 HTTP 客户端，HTTP 服务器是否产生了预期的 Response 。 HTTP/1.1 协议中定义了 5 类状态码，状态码由三位数字组成，第一个数字定义了响应的类别。</p><p>常见状态码类型：</p><blockquote><ul><li>1XX 提示信息——表示请求已被成功接收，继续处理。</li><li>2XX 成功——表示请求已被成功接收，理解，接受。</li><li>3XX 重定向——要完成请求必须进行更进一步的处理。</li><li>4XX 客户端错误——请求有语法错误或请求无法实现。</li><li>5XX 服务器端错误——服务器未能实现合法的请求。</li></ul></blockquote><ul><li><strong>响应头</strong></li></ul><p>响应头包含服务器对请求的应答信息，如 Content-Type 、 Server 、 Set-Cookie 等。</p><table><thead><tr><th style="text-align:center">响应头</th><th style="text-align:left">说 明</th></tr></thead><tbody><tr><td style="text-align:center">Allow</td><td style="text-align:left">服务器支持哪些请求方法（如 GET、POST 等）</td></tr><tr><td style="text-align:center">Content-Encoding</td><td style="text-align:left">文档的编码（Encode）方法。只有在解码之后才可以得到用 Content-Type 头指定的内容类型。利用 gzip 压缩文档能够显著地减少 HTML 文档的下载时间</td></tr><tr><td style="text-align:center">Content-Length</td><td style="text-align:left">表示内容长度。只有当浏览器使用持久 HTTP 连接时才需要这个数据</td></tr><tr><td style="text-align:center">Content-Type</td><td style="text-align:left">表示后面的文档属于什么 MIME 类型</td></tr><tr><td style="text-align:center">Date</td><td style="text-align:left">当前的 GMT 时间</td></tr><tr><td style="text-align:center">Expires</td><td style="text-align:left">应该在什么时候认为文档已经过期，从而不再缓存它</td></tr><tr><td style="text-align:center">Last-Modified</td><td style="text-align:left">文档的最后改动时间。可以通过 If-Modified-Since 请求头提供一个日期，该请求将被视为一个有条件的 GET 请求。只有改动时间迟于指定时间的文档才会返回，否则返回一个 304（Not Modified）状态。</td></tr><tr><td style="text-align:center">Last-Modified</td><td style="text-align:left">也可用setDateHeader()方法来设置</td></tr><tr><td style="text-align:center">Location</td><td style="text-align:left">表示客户端应该当到哪里去提取文档，通常不是直接设置的</td></tr><tr><td style="text-align:center">Refresh</td><td style="text-align:left">表示浏览器应该在多少时间之后刷新文档，以秒计</td></tr><tr><td style="text-align:center">Server</td><td style="text-align:left">服务器的名字</td></tr><tr><td style="text-align:center">Set-Cookie</td><td style="text-align:left">设置和页面关联的 Cookie</td></tr><tr><td style="text-align:center">WWW-Authenticate</td><td style="text-align:left">客户应该在 Authorization 头中提供的授权信息。在包含 401（Unauthorized）状态行的应答中这个信息是必需的</td></tr></tbody></table><ul><li><strong>响应体</strong></li></ul><p>响应体是 HTTP 请求返回的内容，响应的正文数据都在响应体中。</p><h3 id="Go-语言中的-HTTP"><a class="header-anchor" href="#Go-语言中的-HTTP">☃</a>Go 语言中的 HTTP</h3><p>Go 语言中请求头和响应头使用 Header 类型表示，Header 类型是一个映射(map)类型，表示 HTTP 请求头中的多个键值对。其定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Header <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过请求对象的 Header 属性可以访问到请求头信息。Header 属性是映射结构，提供了 Get() 方法以获取 key 对应的第一个值。Get()  方法的定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>h Header<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Header 结构体的其他常用方法的定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>h Header<span class="token punctuation">)</span><span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment">// 设置头信息</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h Header<span class="token punctuation">)</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment">//添加头信息</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h Header<span class="token punctuation">)</span> <span class="token function">Del</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment">//删除头信息</span><span class="token keyword">func</span><span class="token punctuation">(</span>h Header<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span>  <span class="token comment">//使用线模式 (in wire format) 写头信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求体和响应体都由 Request 结构中的 Body 字段表示。 Body 字段是一个 <code>io.ReadCloser</code> 接口。<code>ReadCloser</code> 接口的定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ReadCloser <span class="token keyword">interface</span> <span class="token punctuation">{</span>ReaderCloser<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Body 字段是 <code>Reader</code> 接口和 <code>Closer</code> 接口的结<br>合。<code>Reader</code> 接口的定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Reader <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过 Reader 接口可以看到，Read() 方法实现了 ReadCloser 接口。所以，可以通过 Body.Read() 方法来读取请求体信息接下来通过示例来加深对 Body.Read() 方法的理解。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">getBody</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin">len</span> <span class="token operator">:=</span> r<span class="token punctuation">.</span>ConterntLengthbody <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/getBody"</span><span class="token punctuation">,</span> getBody<span class="token punctuation">)</span>err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8082"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ResponseWriter 接口包含 WriteHeader() 、Header() 、Write() 三个方法来设置响应状态码。</p><ul><li><strong>WriteHeader()</strong> 方法</li></ul><p>WrteHeader() 方法支持传入一个整型数据来表示响应状态码，如果不调用该方法，则默认响应状态码是 200 。 WriteHeader() 方法的主要作用是在 API 接口中返回错误码。例如，可以自定义一个处理器方法 noAuth() ，并通过 w.WriteHeader() 方法返回一个 401 未认证状态码（注意：在运行时，w 代表的是对应的 response 对象实例，而不是接口）。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">noAuth</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token comment">//默认200</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"未授权，认证后才能访问该接口！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/noAuth"</span><span class="token punctuation">,</span> noAuth<span class="token punctuation">)</span>err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8086"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Header()</strong> 方法</li></ul><p>Header() 方法用于设置响应头。可以通过 Header().Set() 方法设置响应头。w.Header() 方法返回的是 Header 响应头对象，它和请求头共用一个结构体。因此在请求头中支持的方法这里都支持，比如可以通过 w.Header().Add() 方法新增响应头。<br>例如，如果要设置一个 301 重定向响应，则只需要通过 w.WriteHeader() 方法将响应状态码设置为 301 ，再通过 w.Header().Set() 方法将 “Location” 设置为一个可访问域名即可。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Redirect</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token comment">// 设置一个 301 重定向，重定向无需响应体。</span>w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">,</span> <span class="token string">"https://www.shirdon.com"</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">)</span><span class="token comment">//WriteHeader()调用后，无法设置响应头。</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/redirect"</span><span class="token punctuation">,</span> Redirect<span class="token punctuation">)</span>err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8086"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提示：w.Header.Set( )方法应在 w.WriteHeader() 方法之前被调用，因为一旦调用了 w.WriteHeader() 方法，就不能对响应头进行设置了。</p></blockquote><ul><li><strong>Wite()</strong> 方法</li></ul><p>Write() 方法用于将数据写入 HTTP 响应体中。如果在调用 Write() 方法时还不知道 Coment-Te 真型，则可以通过数据的前 512 个 byte 进行判断。用 Write()方法可以返回字符毫数据也可以返回 HTML 文档和 JSON 等常见的文本格式。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>  <span class="token punctuation">{</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"你好～，欢迎一起学习《Go Web编程实战派从入门到精通》！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/welcome"</span><span class="token punctuation">,</span> Welcome<span class="token punctuation">)</span>err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8086"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应头中 Content-Type 根据传入数据自行判断。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Home</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>  <span class="token punctuation">{</span>html <span class="token operator">:=</span> <span class="token string">`&lt;html&gt;         &lt;head&gt;            &lt;title&gt;Write方法返回HTML文档&lt;/title&gt;        &lt;/head&gt;         &lt;body&gt;            &lt;h1&gt;你好，欢迎一起学习《Go Web编程实战派从入门到精通》        &lt;/body&gt;     &lt;/html&gt;`</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> Home<span class="token punctuation">)</span>err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8086"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"encoding/json"</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Greeting <span class="token keyword">struct</span> <span class="token punctuation">{</span>Message <span class="token builtin">string</span> <span class="token string">`json:"message"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token comment">// 返回 JSON 格式数据</span>greeting <span class="token operator">:=</span> Greeting<span class="token punctuation">{</span><span class="token string">"欢迎一起学习《Go Web编程实战派从入门到精通》"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>message<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> Hello<span class="token punctuation">)</span>err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8086"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Response"><a class="header-anchor" href="#Response">☃</a><strong>Response</strong></h3><p>Response 是 HTTP 请求的响应，包含返回给浏览器端的数据。</p><p>结构体定义：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Response <span class="token keyword">struct</span> <span class="token punctuation">{</span>Status <span class="token builtin">string</span> <span class="token comment">// e.g. "200OK"</span>StatusCode <span class="token builtin">int</span> <span class="token comment">// e.g. 200</span>Proto <span class="token builtin">string</span> <span class="token comment">// e.g. "HTTP/1.0"</span>ProtoMajor <span class="token builtin">int</span> <span class="token comment">// e.g. 1</span>ProtoMinor <span class="token builtin">int</span> e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> <span class="token number">0</span>Header HeaderBody io<span class="token punctuation">.</span>ReadCloserContentLength <span class="token builtin">int64</span>TransferEncoding<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>Close <span class="token builtin">bool</span>Uncompressed <span class="token builtin">bool</span>Trailer HeaderRequest <span class="token operator">*</span>RequestTLS <span class="token operator">*</span>tls<span class="token punctuation">.</span>ConnectionState<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="Go-Web-服务器"><a class="header-anchor" href="#Go-Web-服务器">☃</a>Go Web 服务器</h1><hr><hr><h2 id="Go-Web-服务器工作流程"><a class="header-anchor" href="#Go-Web-服务器工作流程">☃</a>Go Web 服务器工作流程</h2><hr><p>Go Web 服务器请求和响应的流程如下：</p><ul><li><p>客户端发送请求</p></li><li><p>服务器端的多路复用器收到请求</p></li><li><p>多路复用器根据请求的URL找到注册的处理器，将请求交由处理器处理</p></li><li><p>处理器执行程序逻辑，如果必要，则与数据库进行交互，得到处理结果</p></li><li><p>处理密调用模板引擎将指定的模板和上一步得到的结果渲染成客户端可识别的数据格式（通常是 HTML 格式）</p></li><li><p>服务器端将数据通过 HTTP 响应返回给客户端</p></li><li><p>客户端拿到数据，执行对应的操作（如渲染出来呈现给用户）</p></li></ul><hr><p>简单的 Go Web 服务器</p><pre class="line-numbers language-none"><code class="language-none">package mainimport ("fmt""log""net/http")func action(w http.ResponseWriter, r *http.Request) {fmt.Fprintf(w, "Hello Go Web!")}func main() {http.HandleFunc("/hello", action)if err := http.ListenAndServe(":8081", nil); err != nil {log.Fatal(err)}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ResponseWriter"><a class="header-anchor" href="#ResponseWriter">☃</a><strong>ResponseWriter</strong></h3><p>Co 语言对接口的实现，不需要显式的声明，只要实现了被口定义的方法，就实现了相应的接口。<br><code>io.Wrter</code> 是一个接口类型。如果要使用 <code>io.Writer</code>  接口的 Write() 方法，则需要实现 Write([]byte) (n int, err error) 方法。</p><p>在 Go 语言中，客户端请求信息都被封装在 Request 对象中。但是发送给客户端的响应并不是 Response 对象，而是 ResponseWriter 接口。ResponseWriter 接口是处理器用来创建 HTTP 响应的接口的。ResponseWriter 接口的定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ResponseWriter <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token comment">// 用于设置或者获取所有响应头信息</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Header<span class="token comment">// 用于写入数据到响应体中</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token comment">// 用于设置响应状态码</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>statusCode <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上，在底层支撑 ResponseWriter 接口的是 http.response 结构体。在调用处理器处理 HTTP 请求时，会调用 readRequest() 方法 readRequest() 方法会声明response结构体，并且其返回值是 response 指针这也是在处理器方法声明时，Reqyest 是指针类型，而 ResponseWriter 不是指针类型的原因。实际上，响应对象也是指针类型。<br>核心代码如下： readRequest()方法的</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>conn<span class="token punctuation">)</span> <span class="token function">readRequest</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>response<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>w <span class="token operator">=</span> <span class="token operator">&amp;</span>response<span class="token punctuation">{</span>conn<span class="token punctuation">:</span>c<span class="token punctuation">,</span>cancelCtx<span class="token punctuation">:</span>cancelCtx<span class="token punctuation">,</span>req<span class="token punctuation">:</span>req<span class="token punctuation">,</span>reqBody<span class="token punctuation">:</span>req<span class="token punctuation">.</span>Body<span class="token punctuation">,</span>handlerHeader<span class="token punctuation">:</span><span class="token function">make</span><span class="token punctuation">(</span>Header<span class="token punctuation">)</span><span class="token punctuation">,</span>contentLength<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>closeNotifyCh<span class="token punctuation">:</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>wants10KeepAlive<span class="token punctuation">:</span>req<span class="token punctuation">.</span><span class="token function">wantsHttp10KeepAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>wantsClose<span class="token punctuation">:</span>req<span class="token punctuation">.</span><span class="token function">wantsClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">if</span> isH2Upgrade <span class="token punctuation">{</span>w<span class="token punctuation">.</span>closeAfterReply <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span>w<span class="token punctuation">.</span>cr<span class="token punctuation">.</span>res <span class="token operator">=</span> ww<span class="token punctuation">.</span>w <span class="token operator">=</span> <span class="token function">newBufioWriterSize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>w<span class="token punctuation">.</span>cw<span class="token punctuation">,</span> bufferBeforeChunkingSizw<span class="token punctuation">)</span><span class="token keyword">return</span> w<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>response 结构体的定义和 ResponseWriter 接口都位于 server.go 文件中。不过由于 response 结构体是私有的，对外不可见，所以只能通过 ResponseWriter 接口访问它。两者之间的关系是：ResponseWriter 是一个接口，而 response 结构体实现了。我们引用 ResponseWriter 接口，实际上引用的是 response 结构体的实例。</p><h3 id="Request"><a class="header-anchor" href="#Request">☃</a><strong>Request</strong></h3><p>Request 是 HTTP 请求，用于返回 HTTP 请求的报文，里面包含了浏览器端的相关信息。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Request <span class="token keyword">struct</span> <span class="token punctuation">{</span>Method <span class="token builtin">string</span> <span class="token comment">//请求的方法</span>URL <span class="token operator">*</span>url<span class="token punctuation">.</span>URL <span class="token comment">//请求报文中的 URL 地址，是指针类型Proto string //形如："HTTP/1.0”</span>ProtoMajorint <span class="token comment">//1</span>ProtoMinorint <span class="token comment">//0</span>Header Header <span class="token comment">// 请求头字段</span>Bodyio<span class="token punctuation">.</span>ReadCloser <span class="token comment">// 请求体</span>GetBody <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>io<span class="token punctuation">.</span>ReadCloser<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>ContentLength <span class="token builtin">int64</span>TransferEncoding <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token comment">//</span>Close <span class="token builtin">bool</span>Host <span class="token builtin">string</span>请求报文中的一些参数，包括表单字段等Form url<span class="token punctuation">.</span>ValuesPostForm url<span class="token punctuation">.</span>ValuesMultipartForm <span class="token operator">*</span>multipart<span class="token punctuation">.</span>FormTrailer HeaderRemoteAddr <span class="token builtin">string</span>RequestURI <span class="token builtin">string</span>TLS <span class="token operator">*</span>tls<span class="token punctuation">.</span>ConnectionStateCancel <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Response <span class="token operator">*</span>Responsectx context<span class="token punctuation">.</span>Context<span class="token punctuation">}</span><span class="token keyword">type</span> Request <span class="token keyword">struct</span> <span class="token punctuation">{</span>Method <span class="token builtin">string</span>URL <span class="token operator">*</span>url<span class="token punctuation">.</span>URLProto <span class="token builtin">string</span>ProtoMajor <span class="token builtin">int</span>ProtoMinor <span class="token builtin">int</span>Header HeaderBody io<span class="token punctuation">.</span>ReadCloserGetBody <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>io<span class="token punctuation">.</span>ReadCloser<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>ContentLength <span class="token builtin">int64</span>TransferEncoding <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>Close <span class="token builtin">bool</span>Host <span class="token builtin">string</span>Form url<span class="token punctuation">.</span>ValuesPostForm url<span class="token punctuation">.</span>ValuesMultipartForm <span class="token operator">*</span>multipart<span class="token punctuation">.</span>FormTrailer HeaderRemoteAddr <span class="token builtin">string</span>RequestURI <span class="token builtin">string</span>TLS <span class="token operator">*</span>tls<span class="token punctuation">.</span>ConnectionStateCancel <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Response <span class="token operator">*</span>Responsectx context<span class="token punctuation">.</span>Context<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Reauest 结构体主要用于返回.话同的应，只有正确也解行真越数屏、才能内客户端返回响应。</p><p>下方是 Go 服务器端的代码，用于解析 Request 结构体中各成员（属性）。具体代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span>（<span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token string">"strings"</span><span class="token keyword">func</span> <span class="token function">request</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token comment">//这些信息是输出到服务器端的打印信息</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Request解析"</span><span class="token punctuation">)</span><span class="token comment">//HTTP方法</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Method<span class="token punctuation">)</span><span class="token comment">//RequestURI是被客户端发送到服务器端的请求行中未修改的请求</span>URIfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"RequestURI:"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>RequestURI<span class="token punctuation">)</span><span class="token comment">//URL 类型，下方分别列出URL的各成员</span>fnt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"URL_path"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>fnt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"URL RawQuery"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>RawQuery<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"URL_Fragment"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Fragment<span class="token punctuation">)</span><span class="token comment">//协议版本</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"proto"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>Proto<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"protomajor"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>ProtoMajor<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"protominor"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ProtoMinor<span class="token punctuation">)</span><span class="token comment">//HTTP请求头</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> r<span class="token punctuation">.</span>Header一<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> vv <span class="token operator">:=</span> <span class="token keyword">range</span> v <span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"header key:"</span><span class="token operator">+</span> k<span class="token operator">+</span><span class="token string">"value:"</span><span class="token operator">+</span> vv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//判断是否为multipart方式</span>isMultipart<span class="token operator">:=</span> <span class="token boolean">false</span><span class="token keyword">for</span> <span class="token punctuation">,</span> v<span class="token operator">:=</span><span class="token keyword">range</span> r<span class="token punctuation">.</span>Header<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">"multipart/form-data"</span><span class="token punctuation">)</span> ！<span class="token operator">=</span><span class="token operator">-</span><span class="token function">1</span><span class="token punctuation">(</span>isMultipart <span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">(</span>解析 Form表单<span class="token keyword">if</span> isMultipart <span class="token operator">==</span> <span class="token boolean">true</span> r<span class="token punctuation">.</span><span class="token function">ParseMultipartForm</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"解析方式:ParseMultipartForm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span> （r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"解析方式：ParseForm"</span><span class="token punctuation">)</span><span class="token comment">//HTTP Body 内容长度</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ContentLength"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ContentLength<span class="token punctuation">)</span><span class="token comment">//是否在回复请求后关闭连接</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Close"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Close<span class="token punctuation">)</span><span class="token comment">//HOST</span>fmt<span class="token punctuation">.</span>Prin host"<span class="token punctuation">,</span>r<span class="token punctuation">.</span>Host<span class="token punctuation">)</span><span class="token comment">//该请求的来源地班</span>fmt<span class="token punctuation">.</span><span class="token function">PrintIn</span><span class="token punctuation">(</span><span class="token string">"RemoteAddr"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"hello, let's go!"</span><span class="token punctuation">)</span> <span class="token comment">//这个是输出到客户端的</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span>request<span class="token punctuation">)</span>err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8081"</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err<span class="token operator">!=</span><span class="token boolean">nil</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"ListenAndServe:"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">request</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Request解析"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"method:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Method<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"RequestURI:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>RequestURI<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"URL.Path:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"URL.RawQuery:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>RawQuery<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"URL.Fragment:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Fragment<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Proto:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Proto<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ProtoMajor:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ProtoMajor<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ProtoMinor:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ProtoMinor<span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> r<span class="token punctuation">.</span>Header <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> vv <span class="token operator">:=</span> <span class="token keyword">range</span> v <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"header key:"</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">" value:"</span> <span class="token operator">+</span> vv<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>isMultipart <span class="token operator">:=</span> <span class="token boolean">false</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> r<span class="token punctuation">.</span>Header<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">"multipart/form-data"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>isMultipart <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> isMultipart <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>r<span class="token punctuation">.</span><span class="token function">ParseMultipartForm</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"解析方式：ParseMultipartForm"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"解析方式：ParseForm"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ContentLength:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ContentLength<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Close:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Close<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Host:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Host<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"RemoteAddr:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"hello, let's go!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8081"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"ListenAndServe:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多路复用器工作原理"><a class="header-anchor" href="#多路复用器工作原理">☃</a><strong>多路复用器工作原理</strong></h3><p>多路复用器用于转发请求到处理器,会在映射中找出被请求 URL 最为匹配的 URL 将请求重定向至相应的处理器，它然后调用与之相对应的处理器的 ServeHTTP 方法来处理请求。</p><p>DefaultServeMux 是 <code>net/http</code> 包中默认提供的一个多路复用器，其实质是 ServeMux 的一个实例，如果用户没有为 Server 对象指定处理器，则服务器默认使用 DefaultServeMux 作为 ServeMux 结构体的实例 ServeMux 也是一个处理器，可以在需要时对其实仪实施处理器串联。</p><p>默认的多路复用器 DefaultServeMux 其声明语句如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> DefaultServeMux <span class="token operator">=</span> <span class="token operator">&amp;</span>defaultServeMux<span class="token keyword">var</span> defaultServeMux ServeMux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>HandleFunc() 函数用于为指定的 URL 注册一个处理器，HandleFunc() 处理器函数会在内部调用 DefaultServeMux 对象的对应方法，其内部实现如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//为指定 URL 注册处理器</span><span class="token keyword">func</span> <span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWrite<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>DefaultServeMux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Handle</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler Handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>DefaultServeMux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>sh serverHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>handler <span class="token operator">:=</span> sh<span class="token punctuation">.</span>srv<span class="token punctuation">.</span>Handler<span class="token keyword">if</span> handler <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>handler <span class="token operator">=</span> DefaultServeMux<span class="token punctuation">}</span>handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的方法体可以看出，http.HandleFunc() 函数将处理器注册到多路复用器中。用默认多路复用器还可以指定多个处理器，其使用方法如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">type</span> handle1 <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h1 <span class="token operator">*</span>serverHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"hi, handle1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> handle2 <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h2 <span class="token operator">*</span>serverHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"hi, handle2"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>handle1 <span class="token operator">:=</span> handle1<span class="token punctuation">{</span><span class="token punctuation">}</span>handle2 <span class="token operator">:=</span> handle2<span class="token punctuation">{</span><span class="token punctuation">}</span>server <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server <span class="token punctuation">{</span>Addr<span class="token punctuation">:</span> <span class="token string">"0.0.0.0:8085"</span><span class="token punctuation">,</span>Handler<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span><span class="token punctuation">}</span>http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/handle1"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle1<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/handle2"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle2<span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，直接用 http.Handle() 函数来指定多个处理器。Handle() 函数的代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Handle</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler Handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>DefaultServeMux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过代码可以看到，在 http.Handle() 函数中调用了 DefaultServeMux.Handle() 方法来处理清求服 器收到的每个请求都会调用对应多路复用器的 ServeHTTP() 方法。该方法的代码详情如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>sh serverHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>handler <span class="token operator">:=</span> sh<span class="token punctuation">.</span>srv<span class="token punctuation">.</span>Handler<span class="token keyword">if</span> handler <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>handler <span class="token operator">=</span> DefaultServeMux<span class="token punctuation">}</span>handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 ServeMux 对象的 ServeHTTP() 方法中，会根据 URL 查找注册的处理器，然后将请求交由它处理。默认的多路复用器在生产环境中不建议使用，因为 DefaultServeMux 是一个全局变量，所有代码（包括第三方代码）都可以修改它。有些第三方代码会在  DefaultServeMux 中注册一些处理器，这可能与注册的处理器冲突。比较推荐的做法是自定义多路复用器。</p><p>自定义多路复用器也比较简单，直接调用  http.NewServeMux() 函数即可。然后，在新创建的多路复用器上注册处理器；</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewSeryeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span>hi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">hi</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"hi, web"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span>server <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server <span class="token punctuation">{</span>Addr<span class="token punctuation">:</span> <span class="token string">"8081"</span><span class="token punctuation">,</span>Handler<span class="token punctuation">:</span> mux<span class="token punctuation">,</span>ReadTimeot<span class="token punctuation">:</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>WriteTimeot<span class="token punctuation">:</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面代码中，创建了一个读超时和写超时均为5s的服务器。</p><p>简单总结一下<br>ServerMux 实现了 http.Handler 接口的 ServeHTTP(ResponseWriter.*Request) 方法。在创建  Server 时，如果设置 Handler 为空，则使用 DefaultServeMux 作为默认的处理器，而 DefaultServeMux 是 ServerMux 的一个全局变量。</p><h3 id="ServerMux"><a class="header-anchor" href="#ServerMux">☃</a><strong>ServerMux</strong></h3><p>conn.server 内部调用了 <code>net/http</code> 包默认的路由器，通过路由器把本次请求的信息传递到了后端的处理函数。</p><p>DefualtSeveMux 也提供了 DefaultServeMux handle 和 DefaulterveMux handleFunc这两个函数。可用它们把 http Handle 和 http.andleFunc 的 patern和 Handler 函数绑定到 ServerMux 上。DefaultServeMux 是 ServerMux 的实例对象，下面来看一下 ServerMux 的结构体定义：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ServeMux <span class="token keyword">struct</span><span class="token punctuation">(</span>mu sync<span class="token punctuation">.</span>RWMutex<span class="token comment">// 读写锁，由于请求涉及到并发处理</span>m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>muxEntry<span class="token comment">//路由 map ， pattern-&gt;HandleFunc ，路由规则，一个 string 对应一个 mux 实体，这里的 string 就是注册的路由表达式</span>hosts <span class="token builtin">bool</span><span class="token comment">// 是否包含 hosts</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> muxEntry <span class="token keyword">struct</span><span class="token punctuation">(</span>explicit <span class="token builtin">bool</span><span class="token comment">//是否精确匹配，http包内都使用ture</span>h Handler <span class="token comment">// 路由对应的Handler</span>pattern <span class="token builtin">string</span><span class="token comment">// 路由</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的路由和 handler 的绑定最终都存储到这里。因为 <code>net/http</code> 包内仅支持精确匹配，所以使用标准的 <code>net/http</code> 包不能直接配置带参数的路由，只能配置参数前面的路径，然后在 handler 内部再处理。也可以借助第三方包，比如 httprouter 。</p><h3 id="ServeMux-的-URL-路由匹配"><a class="header-anchor" href="#ServeMux-的-URL-路由匹配">☃</a><strong>ServeMux 的 URL 路由匹配</strong></h3><p>在实际应用中，一个 Web 服务器往往有很多的 URL 绑定，不同的URL对应不同的处理器。服务器是决定使用哪个处理器过程：</p><ul><li>假如现在绑定了 3 个 URL，分别是 / 、/hi 和 /hi/web</li><li>如果请求的 URL为 /，则调用 / 对应的处理器</li><li>如果请求的 URL 为 /hi ，则调用 /hi 对应的处理器</li><li>如果请求的 URL 为 /hi/web ，则调用 /hi/web 对应的处理器。</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">indexHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web首页！处理器为：indexHandler！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">hiHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web首页！处理器为：hiHandler！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">webHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"欢迎来到Go Web首页！处理器为：webHandler！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> indexHandler<span class="token punctuation">)</span><span class="token comment">// "/", "/hi/"，"/hi/web/"</span>mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hi"</span><span class="token punctuation">,</span> hiHandler<span class="token punctuation">)</span><span class="token comment">// "/hi"</span>mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hi/web"</span><span class="token punctuation">,</span> webHandler<span class="token punctuation">)</span><span class="token comment">// "/hi/web"</span>server <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server <span class="token punctuation">{</span>Addr<span class="token punctuation">:</span> <span class="token string">":8083"</span><span class="token punctuation">,</span>Handler<span class="token punctuation">:</span> mux<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理器"><a class="header-anchor" href="#处理器">☃</a><strong>处理器</strong></h3><p>Web 服务器在收到请求后，会根据其 URL 将请求交给相应的多路复用器，多路复用器将请求转发给处理器处理。处理器是实现了 Handler 接口的结构。Handler 接口被定义在 <code>net/http</code> 包中：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token keyword">func</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">type</span> WelcomeHandler <span class="token keyword">struct</span> <span class="token punctuation">{</span>Language <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h WelcomeHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>Language<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/cn"</span><span class="token punctuation">,</span> WelcomeHandler<span class="token punctuation">{</span>Language<span class="token punctuation">:</span> <span class="token string">"欢迎一起来学Go Web!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/en"</span><span class="token punctuation">,</span> WelcomeHandler<span class="token punctuation">{</span>Language<span class="token punctuation">:</span> <span class="token string">"Welcome you, let's learn Go Web!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Server <span class="token punctuation">{</span>Addr<span class="token punctuation">:</span>   <span class="token string">":8082"</span><span class="token punctuation">,</span>Handler<span class="token punctuation">:</span> mux<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，Handler 接口中只有一个 ServeHTTP() 处理器方法。任何实现了 Handle 接口的对象，都可以被注册到多路复用器。</p><h3 id="处理器函数"><a class="header-anchor" href="#处理器函数">☃</a><strong>处理器函数</strong></h3><p>下面以默认的处理器函数 HandleFunc() 为例介绍处理器的使用方法。</p><ul><li>注册一个处理器函数</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go">http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> func_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个处理器函数的第 1 个参数表示匹配的路由地址 第 2 个参数表示一个名为 func_name 的方法，用于处理具体业务逻辑。例如，注册一个处理器函数，并将处理器的路由匹配到 hi 函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span>hi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义一个名为 hi 的函数，用来打印一个字符串到浏览器：</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">hi</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Hi Web!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Server"><a class="header-anchor" href="#Server">☃</a><strong>Server</strong></h3><p>在配置好路由、处理函数以后，接下来就要启动服务，可使用如下代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span>"<span class="token punctuation">:</span><span class="token number">8080</span>°<span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数是监听的端口，以字符串的形式传递；第二个参数是 handler ，传入的是il该语句执行完毕后就开始监听 8080 端口，来看一下该函数的源码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">LiatenAndserve</span><span class="token punctuation">(</span>addrstringrhandler Handler<span class="token punctuation">)</span><span class="token builtin">error</span><span class="token punctuation">[</span>server te <span class="token function">aServer</span><span class="token punctuation">(</span>Addr<span class="token punctuation">:</span>addr<span class="token punctuation">:</span>Handler<span class="token punctuation">:</span> handler<span class="token punctuation">)</span><span class="token keyword">return</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看出，该方法首先要做的就是创建  Server 的实例，并且调用其 ListenAndServe方。Server的结构体：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">1.</span> <span class="token keyword">type</span> Server atruct监听的地址和婚口Addr <span class="token builtin">string</span><span class="token number">3.</span> <span class="token number">2.</span> Bandler Bandler <span class="token comment">// handlerto invoke, http.DefaultServeMuxif nil</span>TLSContig<span class="token operator">*</span>tls<span class="token punctuation">.</span>Config <span class="token operator">/</span><span class="token number">1</span> 读超时时间<span class="token number">5.</span> ieadTineouttime<span class="token punctuation">.</span>Durationtime<span class="token punctuation">.</span>Doration <span class="token comment">// 读关文件超时时间</span><span class="token number">6.</span> ReadieaderTineout<span class="token number">7.</span> writeTimeouttime<span class="token punctuation">.</span>Duration <span class="token comment">//写超时时间</span><span class="token number">8.</span> IdleTimoout time<span class="token punctuation">.</span>Duration<span class="token number">9.</span> HaxlleaderBytesint<span class="token number">10.</span> TLSNextProtonap<span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Server<span class="token punctuation">,</span> <span class="token operator">*</span>tls<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> Handler<span class="token punctuation">)</span><span class="token number">12.</span> ConnState <span class="token keyword">func</span> <span class="token punctuation">(</span>net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> ConnState<span class="token punctuation">)</span><span class="token number">12.</span> ErrorLog ·log<span class="token punctuation">.</span>Logger<span class="token number">13.</span><span class="token number">14.</span> BaseContextfunc <span class="token punctuation">(</span>net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> context<span class="token punctuation">.</span>ContextConnContext <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context<span class="token number">25.</span><span class="token number">16.</span> disableKeepAlivesint32 accessed atomically<span class="token punctuation">.</span><span class="token number">17.</span> inShut<span class="token punctuation">.</span>dowm <span class="token builtin">int</span> <span class="token number">32</span> accessedatomically <span class="token punctuation">(</span>non<span class="token operator">-</span>zero means we're in<span class="token number">18.</span><span class="token number">19.</span> nextProtoonce sync<span class="token punctuation">.</span>Once <span class="token comment">// guards setupHTTP2</span>init<span class="token number">11</span> http2<span class="token punctuation">.</span>ConfigureServerShutdown<span class="token punctuation">)</span><span class="token number">20.</span> nextProtoErr erTor result of <span class="token keyword">if</span> used<span class="token number">21.</span> mu sync<span class="token punctuation">,</span>Mutex<span class="token number">22.</span><span class="token number">23.</span> 1isteners <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token operator">*</span>net<span class="token punctuation">.</span>Listener<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">24.</span> activeConndoneChan <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token operator">*</span>conn<span class="token punctuation">)</span><span class="token keyword">struct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">struct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">25.</span> onShutdownchan<span class="token punctuation">(</span><span class="token function">lfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">26.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Server 的三个方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span><span class="token punctuation">(</span>srv <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Serve</span><span class="token punctuation">(</span><span class="token number">1</span> net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token keyword">func</span><span class="token punctuation">(</span>srv <span class="token operator">*</span>Server<span class="token punctuation">)</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span><span class="token punctuation">(</span>srv<span class="token operator">*</span>Server<span class="token punctuation">)</span><span class="token function">ListenAndServeTLS</span><span class="token punctuation">(</span>certFile<span class="token punctuation">,</span> keyFile <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token builtin">error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Serve 方法</p><ul><li>ListenAndServe 方法的作用是开启 http Server服务。</li><li>ListenAndServeTLS 方法的作用是开启 https Server 服务。</li></ul><p>ResponseWriter ：生成 Response的接口。</p><p>ServerMux ：路由处理函数，这个刚刚介绍过。</p><p>在 Serve 方法执行完成后，就执行 Conn （连接）的 Serve 方法，然后再通过 Conn 的readRequest 方法获取 Response。从逻辑上来说，c.serve方法就是完成这个功能的，此处需关注以下三个接口。</p><ul><li><strong>ResponseWriter</strong> 接口</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ResponseWriter <span class="token keyword">interface</span><span class="token comment">// Beader 方法返回 Response 返回的 Header 供读写</span>Header <span class="token punctuation">(</span><span class="token punctuation">)</span> Header<span class="token comment">// Write 方法写 Response 的 Body</span><span class="token function">Write</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token comment">// WriteHeader 方法根据 HTTP 状态码来写 Response 的 Header</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>该接口的主要作用是供 Handler 函数调用，用来生成要返回的 Response 。</p></blockquote><ul><li><strong>Flusher</strong> 接口</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Flusher <span class="token keyword">interface</span> t<span class="token comment">//刷新缓存区</span>Cotter <span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>该接口的主要作用是供 Handler 调用，将写缓存中的数据刷新到客户端。</p></blockquote><ul><li><strong>Hijacker</strong> 接口</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Hijacker <span class="token keyword">interface</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> Hijacker <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> <span class="token operator">*</span>bufio<span class="token punctuation">.</span>ReadWriter<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>该接口的主要作用是供Handler调用，用以关闭连接。</p></blockquote><p>以上是 Handler 在执行过程中最常用、最重要的三个接口，正是这三个接口使 Handler 可以在处理完逻辑后把结果写回客户端。</p><p>通过对 Server 的介绍，如何在接受请求后调用 Handler 并且生成 response 。</p><p>response 生成以后数据是如何写到客户端的呢？接下来我们开始了解response。</p><h3 id="response"><a class="header-anchor" href="#response">☃</a><strong>response</strong></h3><p>下面的方法用于把数据写给客户端：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">serverHandler</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Server<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>w<span class="token punctuation">.</span>req<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该语句最终触发了路由绑定，w 是 response的实例对象(此处的 w是 ResponseWriter 接口)，response 实现了 ResponseWriter、Flusher、Hijacker接口。</p><p>response 结构体的定义：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> response <span class="token keyword">struct</span><span class="token punctuation">{</span>conn <span class="token operator">*</span>conn <span class="token comment">//保存此次HTTP连接的信息</span><span class="token comment">//对应请求信息</span><span class="token operator">*</span>Request <span class="token number">2.</span> <span class="token number">3.</span> regchunking <span class="token builtin">bool</span> <span class="token comment">//是否使用chunk</span> wroteHeaderbool <span class="token comment">// header是否已经执行过写操作</span><span class="token number">9.</span> wroteContinuebool <span class="token comment">//100 Continue response was written</span><span class="token number">10.</span> header Header <span class="token operator">/</span> <span class="token operator">/</span> 返回的 HTTP的Header<span class="token number">11.</span> written <span class="token builtin">int64</span> <span class="token comment">// Body的字节数</span><span class="token number">12.</span> contentLength <span class="token builtin">int64</span> <span class="token comment">// Content 长度</span>HTTP状态<span class="token number">10.</span>status<span class="token comment">//</span><span class="token number">13.</span> needSniffboolint<span class="token number">1</span><span class="token operator">/</span>是否开启sniff。若不设置Content<span class="token operator">-</span>Type，开启sniff能自动确定Content<span class="token operator">-</span>Type <span class="token operator">/</span><span class="token number">1</span> 是否保持长链接。若request有keep<span class="token operator">-</span>alive，该字<span class="token number">14.</span> closeAfterReplybool段就设置为<span class="token boolean">false</span>。 是否requestBody太大。当requestBody太大时，<span class="token number">15.</span> requestBodyLimitHitbool <span class="token comment">//</span>response 返回 <span class="token number">411</span><span class="token number">14.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器端需要返回给客户端的所有信息都包含在 response 中。</p><p>response 的主要方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span><span class="token punctuation">(</span>w <span class="token operator">*</span>response<span class="token punctuation">)</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Header<span class="token keyword">func</span><span class="token punctuation">(</span>w <span class="token operator">*</span>response<span class="token punctuation">)</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">func</span><span class="token punctuation">(</span>w <span class="token operator">*</span>response<span class="token punctuation">)</span><span class="token function">Write</span><span class="token punctuation">(</span>data <span class="token punctuation">(</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span><span class="token punctuation">(</span>w <span class="token operator">*</span>response<span class="token punctuation">)</span><span class="token function">WriteString</span><span class="token punctuation">(</span>data <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token comment">// either dataB or dataS is non-zero.</span><span class="token keyword">func</span><span class="token punctuation">(</span>w <span class="token operator">*</span>response<span class="token punctuation">)</span> <span class="token function">write</span><span class="token punctuation">(</span>lenDataint<span class="token punctuation">,</span> dataB <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> dataS <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w <span class="token operator">*</span>response<span class="token punctuation">)</span> <span class="token function">finishRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span><span class="token punctuation">(</span>w <span class="token operator">*</span>response<span class="token punctuation">)</span> <span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span><span class="token punctuation">(</span>w <span class="token operator">*</span>response<span class="token punctuation">)</span> <span class="token function">Hijack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>rwcnet<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> buf <span class="token operator">*</span>bufio<span class="token punctuation">.</span>ReadWriter<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，response 实现了ResponseWriter、Flusher、Hijacker三个接口，有了这三个接口，response 就可以把处理结果写回客户端。</p><h3 id="ServeHTTP-w-w-req"><a class="header-anchor" href="#ServeHTTP-w-w-req">☃</a><strong>ServeHTTP(w , w.req)</strong></h3><p>前面介绍了如何通过 response把数据写回客户端，不过 Handler 如何生成 response ，来看 Handler 接口：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Handler <span class="token keyword">interface</span><span class="token punctuation">(</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token comment">//具体的逻辑函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在实现Handler接口的时候，就意味着已经有处理请求逻辑的函数了。serverHandle 通过 ServeHTTP 来选择触发 HandleFunc ，此处有一个判断，如果有自定义的 Handler 函数就调用自定义的处理器，如果是 nil 则使用默认的 DefaultServeMux 。<br>DefaultServeMux.ServeHttp的执行流程如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">i<span class="token punctuation">.</span> h<span class="token punctuation">,</span> <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">Handler</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>ii<span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对这些内容的理解，此处再从执行流程上梳理一下，整体流程如下。</p><p>第一步：调用 http.HandleFunc 注册路由和对应处理函数。</p><p>第二步：先后调用 DefaultServeMux 的 HandleFunc 和 Handle ，并且向 handler(也就是 map[string]muxEntry) 中注册路由和对象的函数<br>。<br>第三步：实例化 Server，并调用 ListenAndServe 。</p><p>第四步：调用 net.Listen(“tcp”，addr)，等待请求，每一个请求创建一个 Conn，并且启动一个 goroutine 处理请求。</p><p>第五步：通过 readRequest 方法读取请求内容，或者说 response 的取值过程。</p><p>第六步：进入 serveHandler.ServeHTTP ， ServeHTTP 方法内会判断有没有自定义的 handler ，如果没有则使用默认的 DefaultServeMux。</p><p>第七步：调用 handler (或DefaultServeMux)的 ServeHTTP 方法。</p><p>第八步：通过 request 选择匹配的 handler ，遍历 muxEntry ，寻找满足这个 Request 的路由。如果找到满足条件的路由，调用对象 handler 的 ServeHTTP ；如果没有找到满足条件的路由，调用 NotFoundHandler 的 ServeHTTP 。</p><p><code>net/http</code> 包提供了以函数的方式注册处理器，即用HandleFunc() 函数来注册处理器，如果一个函数实现了匿多函数 func(w http.ResponseWriter,r *http.Request) ，则这个函数被为为“处理器函数”。 HandleFunc() 函数内部调用了 ServeMux 对象的 Handlefunc() 方法。ServeMux 对象的 HandleFunc() 方法具体代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span> <span class="token function">HandleFunc</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> handler <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"http: nil handler"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token function">HandlerFunc</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续查看内部代码可以发现 HandlerFunc( 函数最终也实现了 Handler 接口的 ServeHTTP() 方法。其实现代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f HandlerFunc<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">f</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Handler-的定义"><a class="header-anchor" href="#Handler-的定义">☃</a><strong>Handler</strong> 的定义</h3><p>Handler 是接收请求后逻辑处理和生成返回信息的逻辑。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">{</span>            <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span>  <span class="token comment">// 路由实现器</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>调用了 HandlerFunc(f)，类似强制类型转换 f 成为 HandlerFunc 类型，这样 f 就拥有了 ServHTTP 方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span>        <span class="token comment">// ServeHTTP calls f(w, r).</span>        <span class="token keyword">func</span> <span class="token punctuation">(</span>f HandlerFunc<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">f</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>路由器接收到请求之后调用 mux.handler®.ServeHTTP(w, r) ，也就是调用对应路由的 handler 的 ServerHTTP 接口</p><p>那么mux.handler®怎么处理的呢？</p><p>根据用户请求的 URL 和路由器里面存储的 map 去匹配的，当匹配到之后返回存储的 handler ，调用这个 handler 的 ServHTTP 接口就可以执行到相应的函数了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span> <span class="token function">handler</span><span class="token punctuation">(</span>r <span class="token operator">*</span>Request<span class="token punctuation">)</span> Handler <span class="token punctuation">{</span>            mux<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">defer</span> mux<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// Host-specific pattern takes precedence over generic ones</span>            h <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Host <span class="token operator">+</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>            <span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                h <span class="token operator">=</span> mux<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                h <span class="token operator">=</span> <span class="token function">NotFoundHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> h        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Go 语言其实支持外部实现的路由器 ListenAndServe 的第二个参数就是用以配置外部路由器的，它是一个 Handler 接口，即外部路由器只要实现了 Handler 接口就可以，我们可以在自己实现的路由器的ServHTTP 里面实现自定义路由功能。</p><ol><li>Handler：处理器接口。定义在 <code>net/http</code> 包中，实现了 Handler 接口的对象，可以生到多路复用器中。</li><li>Handle() ：注册处理器过程中的调用函数。</li><li>HandleFunc() ：处理器函数</li><li>HandlerFunc ：底层为 func (w  ResponseWriter , r *Request) 匿名函数，实现了 Handler 处理器接口。它用来连接处理器函数与处理器。</li></ol><p>简而言之 HandlerFunc() 是一个处理器函数，其内部通过对 ServeMux 中一系列方法的调用最终在底层实现了 Handler 处理器接口的 SepveHTTP) 方法，从而实现处理器的功能。</p><hr><h2 id="Go-语言中-net-http-包运行机制"><a class="header-anchor" href="#Go-语言中-net-http-包运行机制">☃</a>Go 语言中 net/http 包运行机制</h2><hr><ul><li><p>创建 Listen Socket，监听指定的端口，等待客户端请求</p></li><li><p>Listen Socket 接受客户端的请求, 得到 Client Socket ，接下来通过 Client Socket 与客户端通信</p></li><li><p>处理客户端的请求，首先从 Client Socket 读取HTTP请求的协议头，如果是 POST 方法，还可能要读取客户端提交的数据，然后交给相应的 handler 处理请求，handler 处理完毕准备好客户端需要的数据，通过 Client Socket 写给客户端。</p></li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/img_20230105_133058.jpg" alt="net/http 包的运行示意图"></p><hr><p>整个的过程中，只要了解清楚下面三个问题就知道 Go 语言是如何让 Web 运作起来：</p><ul><li><p>如何监听端口？</p></li><li><p>如何接收客户端请求？</p></li><li><p>如何分配handler？</p></li></ul><p>下面通过一个具体的实例来说明：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>            <span class="token string">"fmt"</span>            <span class="token string">"net/http"</span>        <span class="token punctuation">)</span>        <span class="token keyword">type</span> MyMux <span class="token keyword">struct</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>MyMux<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path <span class="token operator">==</span> <span class="token string">"/"</span> <span class="token punctuation">{</span>                <span class="token function">sayhelloName</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            http<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">func</span> <span class="token function">sayhelloName</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Hello myroute!"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mux <span class="token operator">:=</span> <span class="token operator">&amp;</span>MyMux<span class="token punctuation">{</span><span class="token punctuation">}</span>            http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":9090"</span><span class="token punctuation">,</span> mux<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tao7app.files.wordpress.com/2023/01/img_20230105_132916.jpg" alt="net/http 包运行流程图"></p><blockquote><p>Go 语言是通过函数 ListenAndServe 来监听端口，这个底层是这样处理的：初始化一个 server 对象，调用 net. Listen(“tcp”, addr) ，底层用 TCP 协议搭建了一个服务，然后监控设置的端口。</p></blockquote><blockquote><p>执行监控端口之后，调用了  srv.Serve(net.Listener) 函数来处理接收客户端的请求信息。这个函数里面起了一个  for{} ，首先通过 Listener 接收请求，其次创建一个 Conn ，最后单独开了一个 goroutine ，把这个请求的数据当做参数传递给这个 conn 去服务 go c.serve() 。</p></blockquote><h3 id="Conn-中的协程"><a class="header-anchor" href="#Conn-中的协程">☃</a><strong>Conn</strong> 中的协程</h3><p>Go 语言为了实现高并发和高性能, 使用 Goroutines 处理 Conn 的读写事件，这样每个请求都能保持独立，相互不会阻塞，以高效响应网络事件。</p><p>Go 语言在等待客户端请求时写下如下代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">c<span class="token punctuation">,</span> err <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">newConn</span><span class="token punctuation">(</span>rw<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token keyword">go</span> c<span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端的每次请求都会创建一个 Conn，这个Conn 里面保存了该次请求的信息，然后再传递到对应的 handler ，该 handler 中便可以读取到相应的 header 信息，以保证了每个请求的独立性。</p><p>下面通过源码来看  Go 语言对于 HTTP 请求的处理过程。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"> <span class="token keyword">func</span><span class="token punctuation">(</span>srv <span class="token operator">*</span>Server<span class="token punctuation">)</span><span class="token function">Serve</span><span class="token punctuation">(</span><span class="token number">1</span> net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">{</span><span class="token keyword">defer</span> <span class="token number">1.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">3.</span> <span class="token keyword">var</span> tempDelay time<span class="token punctuation">.</span>Duration<span class="token comment">// how long to sleep on accept failure</span><span class="token number">4.</span> <span class="token keyword">for</span><span class="token punctuation">{</span><span class="token number">5.</span> rw<span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token number">1.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">6.</span> <span class="token keyword">if</span> e ！<span class="token operator">=</span><span class="token boolean">nil</span> <span class="token punctuation">(</span><span class="token number">7.</span> <span class="token keyword">if</span> ne<span class="token punctuation">,</span> ok <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> ne<span class="token punctuation">.</span><span class="token function">Temporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">8.</span><span class="token keyword">if</span> tempDelay<span class="token operator">=</span><span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token number">10.</span> tempDelay<span class="token operator">*=</span><span class="token number">2</span><span class="token number">11.</span> <span class="token punctuation">)</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">;</span> tempDelay <span class="token operator">&gt;</span> max：<span class="token operator">=</span><span class="token number">1</span><span class="token number">12.</span> <span class="token number">13.</span> <span class="token keyword">if</span> max tempDelay <span class="token operator">=</span> max 【<span class="token number">14.</span> <span class="token punctuation">)</span><span class="token number">15.</span> log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"http: Accept error: 8v; retrying in Bv"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> tempDelay<span class="token punctuation">)</span><span class="token number">16.</span> time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>tempDelay<span class="token punctuation">)</span><span class="token number">17.</span> <span class="token keyword">continue</span><span class="token number">18.</span><span class="token number">19.</span> <span class="token keyword">return</span> e<span class="token number">21.</span> <span class="token number">20.</span> tempDelay <span class="token operator">=</span><span class="token number">0</span><span class="token number">22.</span><span class="token number">23.</span> c<span class="token punctuation">,</span> err：<span class="token operator">=</span>srv<span class="token punctuation">.</span><span class="token function">newConn</span><span class="token punctuation">(</span>rw<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span><span class="token boolean">nil</span> <span class="token punctuation">(</span><span class="token number">24.</span><span class="token keyword">continue</span><span class="token number">25.</span><span class="token number">26.</span><span class="token number">27.</span> <span class="token keyword">go</span> c<span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">28.</span> <span class="token punctuation">}</span><span class="token number">29.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Server 的 Serve(L net.Listener) 方法监听和处理 HTTP 请求</p></li><li><p>从第4行开始，函数中使用了一个 for 循环，第5行通过参数 Listener 的 Accept 接收请求</p></li><li><p>在第23行基于接收的信息新建一个Conn ，最后第27行启动一个 goroutine 来单独为一个 Conn 服务，不影响其他的 Conn</p></li></ul><blockquote><p>conn 首先会解析 request:c.readRequest() ，然后获取相应的 handler:handler := c.server.Handler ，也就是在调用函数 ListenAndServe 时候的第二个参数，前面例子传递的是 nil，默认获取 handler =  DefaultServeMux ，这个变量是一个路由器，它用来匹配 URL 跳转到其相应的 handle 函数。调用 http.HandleFunc(“/”, sayhelloName) 注册请求 “”/” 的路由规则，当请求 URL 为 “/”，路由就会转到函数 sayhelloName ，DefaultServeMux 会调用 ServeHTTP 方法，这个方法内部其实是调用 sayhelloName 本身，最后通过写入 response 的信息反馈到客户端。</p></blockquote><hr><ol><li>首先调用 Http.HandleFunc ，按顺序做如下操作：</li></ol><ul><li>调用了 DefaultServerMux 的 HandleFunc</li><li>调用了 DefaultServerMux 的 Handle</li><li>向 DefaultServeMux 的map[string]muxEntry 中增加对应的handler和路由规则</li></ul><ol start="2"><li>调用 http.ListenAndServe(“:9090”, nil) ，按顺序做如下操作：</li></ol><ul><li>实例化 Server</li><li>调用 Server 的ListenAndServe()</li><li>调用 net.Listen(“tcp”, addr)监听端口</li><li>启动一个 for 循环，在循环体中 Accept 请求</li><li>对每个请求实例化一个 Conn ，并且开启一个 goroutine 为这个请求进行服务 go  c.serve()</li></ul><ol start="3"><li><p>读取每个请求的内容 w, err := c.readRequest() 判断 handler 是否为空，如果没有设置 handler（此例子没有设置handler）， handler 就默认为DefaultServeMux。调用 handler 的 ServeHttp，在此例中，进入到 DefaultServerMux.ServeHttp 根据 request 选择 handler ，并且进入到这个 handler 的 ServeHTTP， mux.handler®.ServeHTTP(w, r)</p></li><li><p>选择 handler ：</p></li></ol><ul><li>判断是否有路由能满足这个 request（循环遍历 ServerMux 的 muxEntry）</li><li>如果有路由满足，调用这个路由 handler 的 ServeHttp</li><li>如果没有路由满足，调用 NotFoundHandler 的 ServeHttp</li></ul><p>至此，三个问题已经全部解答了对于 Go 语言如何让 Web 跑起来。</p><p>以上就是 <code>net/http</code> 包的核心源码按照功能整理如下：</p><p>(1)路由注册对应的源码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">http<span class="token punctuation">.</span>HandlerFunc<span class="token punctuation">:</span><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token keyword">func</span><span class="token punctuation">(</span>f HandlerFunc<span class="token punctuation">)</span> ServeHTTP <span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token keyword">func</span> HandleFunc <span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">func</span><span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">)</span>accern <span class="token builtin">string</span><span class="token punctuation">,</span> handler <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> http<span class="token punctuation">.</span>Handle<span class="token punctuation">:</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler Handler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)接口监听相关源码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ListenAndServe</span><span class="token punctuation">(</span>addr <span class="token builtin">string</span><span class="token punctuation">,</span> handler Handler<span class="token punctuation">)</span><span class="token builtin">error</span><span class="token keyword">func</span> <span class="token punctuation">(</span>srv <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>(3)接收客户端请求<br>Server的Serve方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>srv <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Serve</span><span class="token punctuation">(</span><span class="token number">1</span> net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> <span class="token builtin">error</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Server 的 newConn 方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>srv <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">newConn</span><span class="token punctuation">(</span>rwc net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> conn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(4)分配Handler</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">c<span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fune <span class="token punctuation">(</span>c <span class="token operator">*</span>conn<span class="token punctuation">)</span>serve <span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">readRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">readRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>w <span class="token operator">*</span>response<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>conn<span class="token punctuation">)</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> w<span class="token punctuation">.</span>req<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>sh serverHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw ResponseWriter<span class="token punctuation">,</span> req Request<span class="token punctuation">)</span>DefaultServeMux<span class="token keyword">type</span> ServeMux <span class="token keyword">struct</span><span class="token keyword">type</span> muxEntry <span class="token keyword">struct</span>Handler接口的定义：<span class="token keyword">type</span> Handler <span class="token keyword">interface</span>ServeMux<span class="token punctuation">.</span>ServeHTTP<span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span><span class="token function">ServelITTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span>mux<span class="token punctuation">.</span><span class="token function">Handler</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span><span class="token function">Handler</span><span class="token punctuation">(</span>r <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">(</span>h Handler<span class="token punctuation">,</span> pattern <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>mux <span class="token operator">*</span>ServeMux<span class="token punctuation">)</span> handler <span class="token punctuation">(</span>host<span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>h Handler<span class="token punctuation">,</span> pattern <span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote></blockquote><h3 id="Handler"><a class="header-anchor" href="#Handler">☃</a><strong>Handler</strong></h3><p>Handler 是接收请求后逻辑处理和生成返回信息的逻辑。<br><code>net/http</code> 包的 Handle 和 HandleFunc 这两个函数的作用。这两个函数都是接收两个参数：第一个参数都是 pattern （请求路径），因为其效果都是给路径绑定处理函数，所以两个函数的作用是一样的；对于第二个参数，一个是 Handler 接口类型，也就是说只要实现了该接口的函数都可以作为第二个参数传人；另一个则是以函数类型作为参数，只要传入的函数以 func(w http.ResponseWriter , r *http.Request)形式声明就可以。因为 ServeHttp 的声明满足 HandleFunc 第二个参数的要求，所以上面代码中第 6 行可以改为：</p><p>虽然上面的两个函数在使用的时候有些区别，但是对于 Go 语言的底层实现来说并无二.，都是交给 DefaultServeMux 来完成处理函数和路由的绑定。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Go Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言配置管理神器-Viper</title>
      <link href="/posts/46415.html"/>
      <url>/posts/46415.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Go-语言配置管理神器-Viper"><a class="header-anchor" href="#Go-语言配置管理神器-Viper">☃</a>Go 语言配置管理神器-Viper</h1><hr><hr><h2 id="Viper-简介"><a class="header-anchor" href="#Viper-简介">☃</a>Viper 简介</h2><hr><p><a href="https://github.com/spf13/viper">Viper</a>是适用于 Go 应用程序的完整配置解决方案。它被设计用于在应用程序中工作，并且可以处理所有类型的配置需求和格式。</p><p>鉴于 <code>viper</code> 库本身的 <a href="http://README.md">README.md</a> 已经写得十分详细，这里将其翻译成中文，方便阅读并在最后附上两个 <code>viper</code> 的示例代码。</p><hr><h2 id="安装-Viper"><a class="header-anchor" href="#安装-Viper">☃</a>安装 Viper</h2><hr><p>安装 <code>Viper</code> ，输入如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get github.com/spf13/viper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Viper-的特性"><a class="header-anchor" href="#Viper-的特性">☃</a>Viper 的特性</h2><hr><p>Viper 支持以下特性：</p><ul><li>设置默认值。</li><li>从 <code>JSON</code> 、<code>TOML</code> 、<code>YAML</code> 、<code>HCL</code> 、 <code>envfile</code> 和 <code>Java properties</code> 格式的配置文件读取配置信息。</li><li>实时监控和重新读取配置文件（可选）。</li><li>从环境变量中读取。</li><li>从远程配置系统（etcd 或，Consul）读取并监控配置变化。</li><li>从命令行参数读取配置。</li><li>从 buffer 读取配置。</li><li>显式配置值。</li></ul><hr><h2 id="为什么选择-Viper"><a class="header-anchor" href="#为什么选择-Viper">☃</a>为什么选择 Viper</h2><hr><p>在构建现代应用程序时，无需担心配置文件格式，专注于构建出色的软件，Viper 的出现就是为了在这方面帮助你。</p><p>Viper能够为你执行下列操作：</p><ol><li>查找、加载和反序列化 <code>JSON</code> 、<code>TOML</code> 、<code>YAML</code> 、<code>HCL</code> 、<code>INI</code> 、<code>envfile</code> 和<code>Java properties</code> 格式的配置文件。</li><li>提供一种机制为你的不同配置选项设置默认值。</li><li>提供一种机制来通过命令行参数覆盖指定选项的值。</li><li>提供别名系统，以便在不破坏现有代码的情况下轻松重命名参数。</li><li>当用户提供了与默认值相同的命令行或配置文件时，可以很容易地分辨出它们之间的区别。</li></ol><p>Viper 会按照下面的优先级，每个项目的优先级都高于它下面的项目:</p><ul><li>显示调用 <code>Set</code> 设置值。</li><li>命令行参数（flag）。</li><li>环境变量。</li><li>配置文件。</li><li>key/value 存储。</li><li>默认值。</li></ul><blockquote><p>重要：目前 Viper 配置的键（Key）是大小写不敏感的。</p></blockquote><hr><h2 id="把值存入-Viper"><a class="header-anchor" href="#把值存入-Viper">☃</a>把值存入 Viper</h2><hr><h3 id="建立默认值"><a class="header-anchor" href="#建立默认值">☃</a>建立默认值</h3><p>一个好的配置系统应该支持默认值。键不需要默认值，但如果没有通过配置文件、环境变量、远程配置或命令行标志（flag）设置键，则默认值非常有用。</p><p>例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">SetDefault</span><span class="token punctuation">(</span><span class="token string">"ContentDir"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">SetDefault</span><span class="token punctuation">(</span><span class="token string">"LayoutDir"</span><span class="token punctuation">,</span> <span class="token string">"layouts"</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">SetDefault</span><span class="token punctuation">(</span><span class="token string">"Taxonomies"</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"tag"</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">,</span> <span class="token string">"category"</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="读取配置文件"><a class="header-anchor" href="#读取配置文件">☃</a>读取配置文件</h3><p>Viper 需要最少知道在哪里查找配置文件的配置。Viper 支持 <code>JSON</code> 、<code>TOML</code> 、<code>YAML</code> 、<code>HCL</code> 、<code>envfile</code> 和 <code>Java properties</code> 格式的配置文件。Viper 可以搜索多个路径，但目前单个 Viper 实例只支持单个配置文件。Viper 不默认任何配置搜索路径，将默认决策留给应用程序。</p><blockquote><p>下面是一个如何使用 Viper 搜索和读取配置文件的示例，不需要任何特定的路径，但是至少应该提供一个配置文件预期出现的路径。</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">SetConfigFile</span><span class="token punctuation">(</span><span class="token string">"./config.yaml"</span><span class="token punctuation">)</span> <span class="token comment">// 指定配置文件路径</span>viper<span class="token punctuation">.</span><span class="token function">SetConfigName</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span> <span class="token comment">// 配置文件名称(无扩展名)</span>viper<span class="token punctuation">.</span><span class="token function">SetConfigType</span><span class="token punctuation">(</span><span class="token string">"yaml"</span><span class="token punctuation">)</span> <span class="token comment">// 如果配置文件的名称中没有扩展名，则需要配置此项</span>viper<span class="token punctuation">.</span><span class="token function">AddConfigPath</span><span class="token punctuation">(</span><span class="token string">"/etc/appname/"</span><span class="token punctuation">)</span>   <span class="token comment">// 查找配置文件所在的路径</span>viper<span class="token punctuation">.</span><span class="token function">AddConfigPath</span><span class="token punctuation">(</span><span class="token string">"$HOME/.appname"</span><span class="token punctuation">)</span>  <span class="token comment">// 多次调用以添加多个搜索路径</span>viper<span class="token punctuation">.</span><span class="token function">AddConfigPath</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>               <span class="token comment">// 还可以在工作目录中查找配置</span>err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">ReadInConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 查找并读取配置文件</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 处理读取配置文件的错误</span><span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Fatal error config file: %s \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在加载配置文件出错时，可以像下面这样处理找不到配置文件的特定情况：</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">ReadInConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span>viper<span class="token punctuation">.</span>ConfigFileNotFoundError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        <span class="token comment">// 配置文件未找到错误；如果需要可以忽略</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 配置文件被找到，但产生了另外的错误</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 配置文件找到并成功解析</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意[自 1.6 起]可以有不带扩展名的文件，并以编程方式指定其格式。对于位于用户 <code>$HOME</code> 目录中的配置文件没有任何扩展名，如 <code>.bashrc</code> 。</p></blockquote><h3 id="写入配置文件"><a class="header-anchor" href="#写入配置文件">☃</a>写入配置文件</h3><p>从配置文件中读取配置文件是有用的，但是有时想要存储在运行时所做的所有修改。为此，可以使用下面一组命令，每个命令都有自己的用途：</p><ul><li>WriteConfig - 将当前的 <code>viper</code> 配置写入预定义的路径并覆盖（如果存在的话）。如果没有预定义的路径，则报错。</li><li>SafeWriteConfig - 将当前的 <code>viper</code> 配置写入预定义的路径。如果没有预定义的路径，则报错。如果存在，将不会覆盖当前的配置文件。</li><li>WriteConfigAs - 将当前的 <code>viper</code> 配置写入给定的文件路径。将覆盖给定的文件(如果它存在的话)。</li><li>SafeWriteConfigAs - 将当前的 <code>viper</code> 配置写入给定的文件路径。不会覆盖给定的文件(如果它存在的话)。</li></ul><p>根据经验，标记为 <code>safe</code> 的所有方法都不会覆盖任何文件，而是直接创建（如果不存在），而默认行为是创建或截断。</p><p>示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">WriteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 将当前配置写入 `viper.AddConfigPath()` 和 `viper.SetConfigName` 设置的预定义路径</span>viper<span class="token punctuation">.</span><span class="token function">SafeWriteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">WriteConfigAs</span><span class="token punctuation">(</span><span class="token string">"/path/to/my/.config"</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">SafeWriteConfigAs</span><span class="token punctuation">(</span><span class="token string">"/path/to/my/.config"</span><span class="token punctuation">)</span> <span class="token comment">// 因为该配置文件写入过，所以会报错</span>viper<span class="token punctuation">.</span><span class="token function">SafeWriteConfigAs</span><span class="token punctuation">(</span><span class="token string">"/path/to/my/.other_config"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="监控并重新读取配置文件"><a class="header-anchor" href="#监控并重新读取配置文件">☃</a>监控并重新读取配置文件</h3><p>Viper 支持在运行时实时读取配置文件的功能。</p><p>需要重新启动服务器以使配置生效的日子已经一去不复返了，viper 驱动的应用程序可以在运行时读取配置文件的更新，而不会错过任何消息。</p><p>只需告诉 viper 实例 watchConfig ，可选地，可以为 Viper 提供一个回调函数，以便在每次发生更改时运行。</p><blockquote><p>确保在调用 <code>WatchConfig()</code> 之前添加了所有的配置路径。</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">WatchConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">OnConfigChange</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>e fsnotify<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 配置文件发生变更之后会调用的回调函数</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Config file changed:"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从io-Reader读取配置"><a class="header-anchor" href="#从io-Reader读取配置">☃</a>从io.Reader读取配置</h3><p>Viper 预先定义了许多配置源，如文件、环境变量、标志和远程 K/V 存储，但你不受其约束，还可以实现自己所需的配置源并将其提供给 viper 。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">SetConfigType</span><span class="token punctuation">(</span><span class="token string">"yaml"</span><span class="token punctuation">)</span> <span class="token comment">// 或者 viper.SetConfigType("YAML")</span><span class="token comment">// 任何需要将此配置添加到程序中的方法。</span><span class="token keyword">var</span> yamlExample <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">`Hacker: truename: stevehobbies:- skateboarding- snowboarding- goclothing:  jacket: leather  trousers: denimage: 35eyes : brownbeard: true`</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">ReadConfig</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>yamlExample<span class="token punctuation">)</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token comment">// 这里会得到 "steve"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="覆盖设置"><a class="header-anchor" href="#覆盖设置">☃</a>覆盖设置</h3><p>这些可能来自命令行标志，也可能来自你自己的应用程序逻辑。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Verbose"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"LogFile"</span><span class="token punctuation">,</span> LogFile<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="注册和使用别名"><a class="header-anchor" href="#注册和使用别名">☃</a>注册和使用别名</h3><p>别名允许多个键引用单个值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">RegisterAlias</span><span class="token punctuation">(</span><span class="token string">"loud"</span><span class="token punctuation">,</span> <span class="token string">"Verbose"</span><span class="token punctuation">)</span>  <span class="token comment">// 注册别名（此处loud和Verbose建立了别名）</span>viper<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"verbose"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 结果与下一行相同</span>viper<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"loud"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>   <span class="token comment">// 结果与前一行相同</span>viper<span class="token punctuation">.</span><span class="token function">GetBool</span><span class="token punctuation">(</span><span class="token string">"loud"</span><span class="token punctuation">)</span> <span class="token comment">// true</span>viper<span class="token punctuation">.</span><span class="token function">GetBool</span><span class="token punctuation">(</span><span class="token string">"verbose"</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用环境变量"><a class="header-anchor" href="#使用环境变量">☃</a>使用环境变量</h3><p>Viper 完全支持环境变量。这使 <code>Twelve-Factor App</code> 开箱即用。有五种方法可以帮助与 ENV 协作:</p><ul><li><code>AutomaticEnv()</code></li><li><code>BindEnv(string...) : error</code></li><li><code>SetEnvPrefix(string)</code></li><li><code>SetEnvKeyReplacer(string...) *strings.Replacer</code></li><li><code>AllowEmptyEnv(bool)</code></li></ul><blockquote><p>使用 ENV 变量时，务必要意识到 Viper 将 ENV 变量视为区分大小写。</p></blockquote><p>Viper 提供了一种机制来确保 ENV 变量是惟一的。通过使用 <code>SetEnvPrefix</code> ，可以告诉 Viper 在读取环境变量时使用前缀，<code>BindEnv</code> 和 <code>AutomaticEnv</code> 都将使用这个前缀。</p><p><code>BindEnv</code> 使用一个或两个参数。第一个参数是键名称，第二个是环境变量的名称。环境变量的名称区分大小写。如果没有提供 ENV 变量名，那么 Viper 将自动假设 ENV 变量与以下格式匹配：前缀键名全部大写。当你显式提供 ENV 变量名（第二个参数）时，它不会自动添加前缀。例如，如果第二个参数是 “id” ，Viper 将查找环境变量 “ID” 。</p><p>在使用 ENV 变量时，需要注意的一件重要事情是，每次访问该值时都将读取它。Viper 在调用 <code>BindEnv</code> 时不固定该值。</p><p><code>AutomaticEnv</code> 是一个强大的助手，尤其是与 <code>SetEnvPrefix</code> 结合使用时。调用时，Viper 会在发出 <code>viper.Get</code> 请求时随时检查环境变量。它将应用以下规则。它将检查环境变量的名称是否与键匹配（如果设置了 <code>EnvPrefix</code> ）。</p><p><code>SetEnvKeyReplacer</code> 允许你使用 <code>strings.Replacer</code> 对象在一定程度上重写 Env 键。如果你希望在 <code>Get()</code> 调用中使用 <code>-</code> 或者其他什么符号，但是环境变量里使用 <code>_</code> 分隔符，那么这个功能是非常有用的。可以在 <code>viper_test.go</code> 中找到它的使用示例。</p><p>或者，你可以使用带有 <code>NewWithOptions</code> 工厂函数的 <code>EnvKeyReplacer</code> 。与 <code>SetEnvKeyReplacer</code> 不同，它接受 <code>StringReplacer</code> 接口，允许编写自定义字符串替换逻辑。</p><p>默认情况下，空环境变量被认为是未设置的，并将返回到下一个配置源。若要将空环境变量视为已设置，请使用 <code>AllowEmptyEnv</code> 方法。</p><h4 id="Env-示例："><a class="header-anchor" href="#Env-示例：">☃</a>Env 示例：</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">SetEnvPrefix</span><span class="token punctuation">(</span><span class="token string">"spf"</span><span class="token punctuation">)</span> <span class="token comment">// 将自动转为大写</span><span class="token function">BindEnv</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>os<span class="token punctuation">.</span><span class="token function">Setenv</span><span class="token punctuation">(</span><span class="token string">"SPF_ID"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">)</span> <span class="token comment">// 通常是在应用程序之外完成的</span>id <span class="token operator">:=</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token comment">// 13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-Flags"><a class="header-anchor" href="#使用-Flags">☃</a>使用 Flags</h3><p>Viper 具有绑定到标志的能力。具体来说，Viper 支持 <a href="https://github.com/spf13/cobra">Cobra</a>库中使用的 <code>Pflag</code> 。</p><p>与 <code>BindEnv</code> 类似，该值不是在调用绑定方法时设置的，而是在访问该方法时设置的。这意味着你可以根据需要尽早进行绑定，即使在 <code>init()</code> 函数中也是如此。</p><p>对于单个标志，<code>BindPFlag()</code> 方法提供此功能。</p><p>例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">serverCmd<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">1138</span><span class="token punctuation">,</span> <span class="token string">"Port to run Application server on"</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">BindPFlag</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> serverCmd<span class="token punctuation">.</span><span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>还可以绑定一组现有的 <code>pflags</code> （pflag.FlagSet）。</p></blockquote><p>举个例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">pflag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"flagname"</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token string">"help message for flagname"</span><span class="token punctuation">)</span>pflag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">BindPFlags</span><span class="token punctuation">(</span>pflag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">)</span>i <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">"flagname"</span><span class="token punctuation">)</span> <span class="token comment">// 从viper而不是从pflag检索值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Viper 中使用 pflag 并不阻碍其他包中使用标准库中的 flag 包，pflag 包可以通过导入这些 flags 来处理 flag 包定义的 flags 。这是通过调用 pflag 包提供的便利函数 <code>AddGoFlagSet()</code> 来实现的。</p><p>例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token string">"github.com/spf13/pflag"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 使用标准库 "flag" 包</span>flag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"flagname"</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token string">"help message for flagname"</span><span class="token punctuation">)</span>pflag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span><span class="token function">AddGoFlagSet</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">)</span>pflag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">BindPFlags</span><span class="token punctuation">(</span>pflag<span class="token punctuation">.</span>CommandLine<span class="token punctuation">)</span>i <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">"flagname"</span><span class="token punctuation">)</span> <span class="token comment">// 从 viper 检索值</span><span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="flag接口"><a class="header-anchor" href="#flag接口">☃</a>flag接口</h4><p>如果你不使用 <code>Pflag</code> ，Viper 提供了两个Go 接口来绑定其他 flag 系统。</p><p><code>FlagValue</code> 表示单个 flag ，这是一个关于如何实现这个接口的非常简单的例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> myFlag <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f myFlag<span class="token punctuation">)</span> <span class="token function">HasChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f myFlag<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"my-flag-name"</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f myFlag<span class="token punctuation">)</span> <span class="token function">ValueString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"my-flag-value"</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f myFlag<span class="token punctuation">)</span> <span class="token function">ValueType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"string"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一旦你的 flag 实现了这个接口，可以很方便地告诉 Viper 绑定它：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">BindFlagValue</span><span class="token punctuation">(</span><span class="token string">"my-flag-name"</span><span class="token punctuation">,</span> myFlag<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>FlagValueSet</code> 代表一组 flags 。这是一个关于如何实现这个接口的非常简单的例子:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> myFlagSet <span class="token keyword">struct</span> <span class="token punctuation">{</span>flags <span class="token punctuation">[</span><span class="token punctuation">]</span>myFlag<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f myFlagSet<span class="token punctuation">)</span> <span class="token function">VisitAll</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span>FlagValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> flag <span class="token operator">:=</span> <span class="token keyword">range</span> flags <span class="token punctuation">{</span><span class="token function">fn</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一旦的 flag set 实现了这个接口，就可以很方便地告诉 Viper 绑定它：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">fSet <span class="token operator">:=</span> myFlagSet<span class="token punctuation">{</span>flags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>myFlag<span class="token punctuation">{</span>myFlag<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> myFlag<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>viper<span class="token punctuation">.</span><span class="token function">BindFlagValues</span><span class="token punctuation">(</span><span class="token string">"my-flags"</span><span class="token punctuation">,</span> fSet<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="远程Key-Value存储支持"><a class="header-anchor" href="#远程Key-Value存储支持">☃</a>远程Key/Value存储支持</h3><p>在 Viper 中启用远程支持，需要在代码中匿名导入 <code>viper/remote</code> 这个包。</p><p><code>import _ "github.com/spf13/viper/remote"</code></p><p>Viper 将读取从 Key/Value 存储（例如 etcd 或 Consul ）中的路径检索到的配置字符串（如<code>JSON</code> 、<code>TOML</code> 、<code>YAML</code> 、<code>HCL</code> 、<code>envfile</code> 和 <code>Java properties</code> 格式）。这些值的优先级高于默认值，但是会被从磁盘、flag 或环境变量检索到的配置值覆盖。（译注：也就是说 Viper 加载配置值的优先级为：磁盘上的配置文件 &gt; 命令行标志位 &gt; 环境变量 &gt; 远程 Key/Value 存储 &gt; 默认值）</p><p>Viper 使用 <a href="https://github.com/bketelsen/crypt">crypt</a> 从 K/V 存储中检索配置，这意味着如果你有正确的gpg 密匙，你可以将配置值加密存储并自动解密，加密是可选的。</p><p>可以将远程配置与本地配置结合使用，也可以独立使用。</p><p><code>crypt</code> 有一个命令行助手，可以使用它将配置放入 K/V 存储中。 <code>crypt</code> 默认使用在<a href="http://127.0.0.1:4001/">http://127.0.0.1:4001</a>的 etcd 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go get github.com/bketelsen/crypt/bin/crypt$ crypt <span class="token builtin class-name">set</span> <span class="token parameter variable">-plaintext</span> /config/hugo.json /Users/hugo/settings/config.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>确认值已经设置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ crypt get <span class="token parameter variable">-plaintext</span> /config/hugo.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>有关如何设置加密值或如何使用 Consul 码的示例，请参见 <code>crypt</code> 文档。</p></blockquote><h3 id="远程-Key-Value-存储示例-未加密"><a class="header-anchor" href="#远程-Key-Value-存储示例-未加密">☃</a>远程 Key/Value 存储示例-未加密</h3><h4 id="etcd"><a class="header-anchor" href="#etcd">☃</a>etcd</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">AddRemoteProvider</span><span class="token punctuation">(</span><span class="token string">"etcd"</span><span class="token punctuation">,</span> <span class="token string">"http://127.0.0.1:4001"</span><span class="token punctuation">,</span><span class="token string">"/config/hugo.json"</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">SetConfigType</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span> <span class="token comment">// 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"</span>err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">ReadRemoteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Consul"><a class="header-anchor" href="#Consul">☃</a>Consul</h4><p>你需要 Consul Key/Value 存储中设置一个 Key 保存包含所需配置的 JSON 值。例如，创建一个 key <code>MY_CONSUL_KEY</code> 将下面的值存入 Consul key/value 存储：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    <span class="token property">"hostname"</span><span class="token operator">:</span> <span class="token string">"liwenzhou.com"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">AddRemoteProvider</span><span class="token punctuation">(</span><span class="token string">"consul"</span><span class="token punctuation">,</span> <span class="token string">"localhost:8500"</span><span class="token punctuation">,</span> <span class="token string">"MY_CONSUL_KEY"</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">SetConfigType</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span> <span class="token comment">// 需要显示设置成json</span>err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">ReadRemoteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>viper<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8080</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>viper<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"hostname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// liwenzhou.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Firestore"><a class="header-anchor" href="#Firestore">☃</a>Firestore</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">AddRemoteProvider</span><span class="token punctuation">(</span><span class="token string">"firestore"</span><span class="token punctuation">,</span> <span class="token string">"google-cloud-project-id"</span><span class="token punctuation">,</span> <span class="token string">"collection/document"</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">SetConfigType</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span> <span class="token comment">// 配置的格式: "json", "toml", "yaml", "yml"</span>err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">ReadRemoteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然也可以使用 <code>SecureRemoteProvider</code> 。</p><h3 id="远程-Key-Value-存储示例-加密"><a class="header-anchor" href="#远程-Key-Value-存储示例-加密">☃</a>远程 Key/Value 存储示例-加密</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">AddSecureRemoteProvider</span><span class="token punctuation">(</span><span class="token string">"etcd"</span><span class="token punctuation">,</span><span class="token string">"http://127.0.0.1:4001"</span><span class="token punctuation">,</span><span class="token string">"/config/hugo.json"</span><span class="token punctuation">,</span><span class="token string">"/etc/secrets/mykeyring.gpg"</span><span class="token punctuation">)</span>viper<span class="token punctuation">.</span><span class="token function">SetConfigType</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span> <span class="token comment">// 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"</span>err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">ReadRemoteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="监控-etcd-中的更改-未加密"><a class="header-anchor" href="#监控-etcd-中的更改-未加密">☃</a>监控 etcd 中的更改-未加密</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 或者你可以创建一个新的viper实例</span><span class="token keyword">var</span> runtime_viper <span class="token operator">=</span> viper<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>runtime_viper<span class="token punctuation">.</span><span class="token function">AddRemoteProvider</span><span class="token punctuation">(</span><span class="token string">"etcd"</span><span class="token punctuation">,</span> <span class="token string">"http://127.0.0.1:4001"</span><span class="token punctuation">,</span> <span class="token string">"/config/hugo.yml"</span><span class="token punctuation">)</span>runtime_viper<span class="token punctuation">.</span><span class="token function">SetConfigType</span><span class="token punctuation">(</span><span class="token string">"yaml"</span><span class="token punctuation">)</span> <span class="token comment">// 因为在字节流中没有文件扩展名，所以这里需要设置下类型。支持的扩展名有 "json", "toml", "yaml", "yml", "properties", "props", "prop", "env", "dotenv"</span><span class="token comment">// 第一次从远程读取配置</span>err <span class="token operator">:=</span> runtime_viper<span class="token punctuation">.</span><span class="token function">ReadRemoteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 反序列化</span>runtime_viper<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>runtime_conf<span class="token punctuation">)</span><span class="token comment">// 开启一个单独的goroutine一直监控远端的变更</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">{</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 每次请求后延迟一下</span>    <span class="token comment">// 目前只测试了etcd支持</span>    err <span class="token operator">:=</span> runtime_viper<span class="token punctuation">.</span><span class="token function">WatchRemoteConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unable to read remote config: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">continue</span>    <span class="token punctuation">}</span>    <span class="token comment">// 将新配置反序列化到我们运行时的配置结构体中。你还可以借助channel实现一个通知系统更改的信号</span>    runtime_viper<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>runtime_conf<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="从Viper获取值"><a class="header-anchor" href="#从Viper获取值">☃</a>从Viper获取值</h2><p>在 Viper 中，有几种方法可以根据值的类型获取值。存在以下功能和方法:</p><ul><li><code>Get(key string) : interface{}</code></li><li><code>GetBool(key string) : bool</code></li><li><code>GetFloat64(key string) : float64</code></li><li><code>GetInt(key string) : int</code></li><li><code>GetIntSlice(key string) : []int</code></li><li><code>GetString(key string) : string</code></li><li><code>GetStringMap(key string) : map[string]interface{}</code></li><li><code>GetStringMapString(key string) : map[string]string</code></li><li><code>GetStringSlice(key string) : []string</code></li><li><code>GetTime(key string) : time.Time</code></li><li><code>GetDuration(key string) : time.Duration</code></li><li><code>IsSet(key string) : bool</code></li><li><code>AllSettings() : map[string]interface{}</code></li></ul><p>需要认识到的一件重要事情是，每一个 Get 方法在找不到值的时候都会返回零值。为了检查给定的键是否存在，提供了 <code>IsSet()</code> 方法。</p><p>例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">viper<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">"logfile"</span><span class="token punctuation">)</span> <span class="token comment">// 不区分大小写的设置和获取</span><span class="token keyword">if</span> viper<span class="token punctuation">.</span><span class="token function">GetBool</span><span class="token punctuation">(</span><span class="token string">"verbose"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"verbose enabled"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问嵌套的键"><a class="header-anchor" href="#访问嵌套的键">☃</a>访问嵌套的键</h3><p>访问器方法也接受深度嵌套键的格式化路径。例如，如果加载下面的 JSON 文件：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"host"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>        <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">5799</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"datastore"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"metric"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>            <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">3099</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"warehouse"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"198.0.0.1"</span><span class="token punctuation">,</span>            <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">2112</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Viper 可以通过传入<code>.</code> 分隔的路径来访问嵌套字段：</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">"datastore.metric.host"</span><span class="token punctuation">)</span> <span class="token comment">// (返回 "127.0.0.1")</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这遵守上面建立的优先规则；搜索路径将遍历其余配置注册表，直到找到为止。(译注：因为Viper支持从多种配置来源，例如磁盘上的配置文件&gt;命令行标志位&gt;环境变量&gt;远程Key/Value存储&gt;默认值，我们在查找一个配置的时候如果在当前配置源中没找到，就会继续从后续的配置源查找，直到找到为止。)</p><p>例如，在给定此配置文件的情况下， <code>datastore.metric.host</code> 和 <code>datastore.metric.port</code> 均已定义（并且可以被覆盖）。如果另外在默认值中定义了 <code>datastore.metric.protocol</code> ，Viper 也会找到它。</p><p>然而，如果 <code>datastore.metric</code> 被直接赋值覆盖（被 flag ，环境变量，<code>set()</code> 方法等等…），那么 <code>datastore.metric</code> 的所有子键都将变为未定义状态，它们被高优先级配置级别“遮蔽”（shadowed）了。</p><p>最后，如果存在与分隔的键路径匹配的键，则返回其值。例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span>    <span class="token string">"datastore.metric.host"</span><span class="token punctuation">:</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"host"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>        <span class="token string">"port"</span><span class="token punctuation">:</span> <span class="token number">5799</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"datastore"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"metric"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"host"</span><span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>            <span class="token string">"port"</span><span class="token punctuation">:</span> <span class="token number">3099</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"warehouse"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"host"</span><span class="token punctuation">:</span> <span class="token string">"198.0.0.1"</span><span class="token punctuation">,</span>            <span class="token string">"port"</span><span class="token punctuation">:</span> <span class="token number">2112</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">"datastore.metric.host"</span><span class="token punctuation">)</span> <span class="token comment">// 返回 "0.0.0.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提取子树"><a class="header-anchor" href="#提取子树">☃</a>提取子树</h3><p>从 Viper 中提取子树。例如，<code>viper</code> 实例现在代表了以下配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">app</span><span class="token punctuation">:</span>  <span class="token key atrule">cache1</span><span class="token punctuation">:</span>    <span class="token key atrule">max-items</span><span class="token punctuation">:</span> <span class="token number">100</span>    <span class="token key atrule">item-size</span><span class="token punctuation">:</span> <span class="token number">64</span>  <span class="token key atrule">cache2</span><span class="token punctuation">:</span>    <span class="token key atrule">max-items</span><span class="token punctuation">:</span> <span class="token number">200</span>    <span class="token key atrule">item-size</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行后：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">subv <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span><span class="token string">"app.cache1"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>subv</code> 现在就代表：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">max-items</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token key atrule">item-size</span><span class="token punctuation">:</span> <span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>假设我们现在有这么一个函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewCache</span><span class="token punctuation">(</span>cfg <span class="token operator">*</span>Viper<span class="token punctuation">)</span> <span class="token operator">*</span>Cache <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它基于 <code>subv</code> 格式的配置信息创建缓存。现在，可以轻松地分别创建这两个缓存，如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">cfg1 <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span><span class="token string">"app.cache1"</span><span class="token punctuation">)</span>cache1 <span class="token operator">:=</span> <span class="token function">NewCache</span><span class="token punctuation">(</span>cfg1<span class="token punctuation">)</span>cfg2 <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span><span class="token string">"app.cache2"</span><span class="token punctuation">)</span>cache2 <span class="token operator">:=</span> <span class="token function">NewCache</span><span class="token punctuation">(</span>cfg2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反序列化"><a class="header-anchor" href="#反序列化">☃</a>反序列化</h3><p>你还可以选择将所有或特定的值解析到结构体、map 等。</p><p>有两种方法可以做到这一点：</p><ul><li><code>Unmarshal(rawVal interface{}) : error</code></li><li><code>UnmarshalKey(key string, rawVal interface{}) : error</code></li></ul><p>举个例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> config <span class="token keyword">struct</span> <span class="token punctuation">{</span>Port <span class="token builtin">int</span>Name <span class="token builtin">string</span>PathMap <span class="token builtin">string</span> <span class="token string">`mapstructure:"path_map"`</span><span class="token punctuation">}</span><span class="token keyword">var</span> C configerr <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>C<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unable to decode into struct, %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想要解析那些键本身就包含 <code>.</code> (默认的键分隔符）的配置，需要修改分隔符：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">v <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">NewWithOptions</span><span class="token punctuation">(</span>viper<span class="token punctuation">.</span><span class="token function">KeyDelimiter</span><span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">SetDefault</span><span class="token punctuation">(</span><span class="token string">"chart::values"</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token string">"ingress"</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>        <span class="token string">"annotations"</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>            <span class="token string">"traefik.frontend.rule.type"</span><span class="token punctuation">:</span>                 <span class="token string">"PathPrefix"</span><span class="token punctuation">,</span>            <span class="token string">"traefik.ingress.kubernetes.io/ssl-redirect"</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">type</span> config <span class="token keyword">struct</span> <span class="token punctuation">{</span>Chart <span class="token keyword">struct</span><span class="token punctuation">{</span>        Values <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> C configv<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>C<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Viper 还支持解析到嵌入的结构体：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/*Example config:module:    enabled: true    token: 89h3f98hbwf987h3f98wenf89ehf*/</span><span class="token keyword">type</span> config <span class="token keyword">struct</span> <span class="token punctuation">{</span>Module <span class="token keyword">struct</span> <span class="token punctuation">{</span>Enabled <span class="token builtin">bool</span>moduleConfig <span class="token string">`mapstructure:",squash"`</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// moduleConfig could be in a module specific package</span><span class="token keyword">type</span> moduleConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>Token <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">var</span> C configerr <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>C<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unable to decode into struct, %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Viper 在后台使用<a href="https://github.com/mitchellh/mapstructure">github.com/mitchellh/mapstructure</a>来解析值，其默认情况下使用<code>mapstructure</code>tag。</p><blockquote><p>当我们需要将viper读取的配置反序列到我们定义的结构体变量中时，一定要使用 <code>mapstructure</code> tag ！</p></blockquote><h3 id="序列化成字符串"><a class="header-anchor" href="#序列化成字符串">☃</a>序列化成字符串</h3><p>可能需要将 viper 中保存的所有设置序列化到一个字符串中，而不是将它们写入到一个文件中。你可以将自己喜欢的格式的序列化器与 <code>AllSettings()</code> 返回的配置一起使用。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    yaml <span class="token string">"gopkg.in/yaml.v2"</span>    <span class="token comment">// ...</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">yamlStringSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    c <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">AllSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    bs<span class="token punctuation">,</span> err <span class="token operator">:=</span> yaml<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unable to marshal config to YAML: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用单个还是多个-Viper-实例"><a class="header-anchor" href="#使用单个还是多个-Viper-实例">☃</a>使用单个还是多个 Viper 实例</h2><p>Viper 是开箱即用的。你不需要配置或初始化即可开始使用 Viper。由于大多数应用程序都希望使用单个中央存储库管理它们的配置信息，所以 viper 包提供了这个功能。它类似于单例模式。</p><p>在上面的所有示例中，它们都以其单例风格的方法演示了如何使用 viper 。</p><h3 id="使用多个-viper-实例"><a class="header-anchor" href="#使用多个-viper-实例">☃</a>使用多个 viper 实例</h3><p>可以在应用程序中创建许多不同的 viper 实例。每个都有自己独特的一组配置和值。每个人都可以从不同的配置文件，key value 存储区等读取数据。每个都可以从不同的配置文件、键值存储等中读取。viper 包支持的所有功能都被镜像为 viper 实例的方法。</p><p>例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">x <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>y <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span><span class="token function">SetDefault</span><span class="token punctuation">(</span><span class="token string">"ContentDir"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">)</span>y<span class="token punctuation">.</span><span class="token function">SetDefault</span><span class="token punctuation">(</span><span class="token string">"ContentDir"</span><span class="token punctuation">,</span> <span class="token string">"foobar"</span><span class="token punctuation">)</span><span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当使用多个 viper 实例时，由用户来管理不同的 viper 实例。</p></blockquote><h2 id="使用-Viper-示例"><a class="header-anchor" href="#使用-Viper-示例">☃</a>使用 Viper 示例</h2><p>假设项目现在有一个 <code>./conf/config.yaml</code> 配置文件，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8123</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"v1.2.3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来通过示例代码演示两种在项目中使用 <code>viper</code> 管理项目配置信息的方式。</p><h3 id="直接使用-viper-管理配置"><a class="header-anchor" href="#直接使用-viper-管理配置">☃</a>直接使用 viper 管理配置</h3><p>这里用一个 demo 演示如何在 gin 框架搭建的web项目中使用 <code>viper</code> ，使用 viper 加载配置文件中的信息，并在代码中直接使用 <code>viper.GetXXX()</code> 方法获取对应的配置值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token string">"github.com/gin-gonic/gin"</span><span class="token string">"github.com/spf13/viper"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>viper<span class="token punctuation">.</span><span class="token function">SetConfigFile</span><span class="token punctuation">(</span><span class="token string">"./conf/config.yaml"</span><span class="token punctuation">)</span> <span class="token comment">// 指定配置文件路径</span>err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">ReadInConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 读取配置信息</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    <span class="token comment">// 读取配置信息失败</span><span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Fatal error config file: %s \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 监控配置文件变化</span>viper<span class="token punctuation">.</span><span class="token function">WatchConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 访问/version的返回值会随配置文件的变化而变化</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/version"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> viper<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">":%d"</span><span class="token punctuation">,</span> viper<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用结构体变量保存配置信息"><a class="header-anchor" href="#使用结构体变量保存配置信息">☃</a>使用结构体变量保存配置信息</h3><p>除了上面的用法外，我们还可以在项目中定义与配置文件对应的结构体，<code>viper</code> 加载完配置信息后使用结构体变量保存配置信息。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token string">"github.com/fsnotify/fsnotify"</span><span class="token string">"github.com/gin-gonic/gin"</span><span class="token string">"github.com/spf13/viper"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>Port    <span class="token builtin">int</span>    <span class="token string">`mapstructure:"port"`</span>Version <span class="token builtin">string</span> <span class="token string">`mapstructure:"version"`</span><span class="token punctuation">}</span><span class="token keyword">var</span> Conf <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Config<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>viper<span class="token punctuation">.</span><span class="token function">SetConfigFile</span><span class="token punctuation">(</span><span class="token string">"./conf/config.yaml"</span><span class="token punctuation">)</span> <span class="token comment">// 指定配置文件路径</span>err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">ReadInConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">// 读取配置信息</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                           <span class="token comment">// 读取配置信息失败</span><span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Fatal error config file: %s \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 将读取的配置信息保存至全局变量Conf</span><span class="token keyword">if</span> err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>Conf<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unmarshal conf failed, err:%s \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 监控配置文件变化</span>viper<span class="token punctuation">.</span><span class="token function">WatchConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 注意！！！配置文件发生变化后要同步到全局变量Conf</span>viper<span class="token punctuation">.</span><span class="token function">OnConfigChange</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>in fsnotify<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"夭寿啦~配置文件被人修改啦..."</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> viper<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>Conf<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unmarshal conf failed, err:%s \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 访问/version的返回值会随配置文件的变化而变化</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/version"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> Conf<span class="token punctuation">.</span>Version<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">":%d"</span><span class="token punctuation">,</span> Conf<span class="token punctuation">.</span>Port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>参考 <a href="https://github.com/spf13/viper/blob/master/README.md">https://github.com/spf13/viper/blob/master/README.md</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Viper </category>
          
          <category> Go </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Go </tag>
            
            <tag> Viper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 开发环境配置</title>
      <link href="/posts/35155.html"/>
      <url>/posts/35155.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Go-的安装、升级与卸载"><a class="header-anchor" href="#Go-的安装、升级与卸载">☃</a>Go 的安装、升级与卸载</h1><hr><hr><h2 id="Go-语言简介"><a class="header-anchor" href="#Go-语言简介">☃</a>Go 语言简介</h2><hr><p>Go 语言是一种并发的、带垃圾回收的、快速编译的新语言。它具有以下特点：</p><ul><li>可在一台计算机上仅用几秒钟的时间编译一个大型的 Go 语言程序。</li><li>Go 语言为软件构造提供了一种模型，它使依赖分析更加容易，且避免了大部分 C 语言风格 include 文件与库的开头。</li><li>Go 语言是静态类型的语言，它的类型系统没有层级。</li><li>Go 语言完全是垃圾回收型的语言，而且为并发执行与通信提供了基本的支持。</li><li>Go 语言是一种云计算时代的语言，它能够充分利用计算机的多核，通过轻量级别的 goroutine 可以实现多并发。</li></ul><hr><h2 id="Go-安装"><a class="header-anchor" href="#Go-安装">☃</a>Go 安装</h2><hr><p>Ubuntu / Deepin / Debain Linux 系统安装 Go 开发环境步骤。</p><h3 id="下载-GO"><a class="header-anchor" href="#下载-GO">☃</a>下载 GO</h3><ul><li>打开 Linux 终端 Terminal ，（以 root 用户身份或通过 sudo ）输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> golang <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>进入 <a href="https://golang.google.cn/">Go 官网</a>下载安装包或者通过输入下面的命令进行安装:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://golang.google.cn/dl/go1.19.5.linux-amd64.tar.gz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-C</span> /usr/local/ <span class="token parameter variable">-xzf</span> go1.19.5.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>go<code>1.19.5</code> 是版本号。</p></blockquote><h3 id="配置环境变量"><a class="header-anchor" href="#配置环境变量">☃</a>配置环境变量</h3><ul><li>将 <code>/usr/local/go/bin</code> 添加到 <code>PATH</code> 环境变量，通过将以下行添加到 <code>$HOME/.profile</code> 中：</li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">export PATH=$PATH:/usr/local/go/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>对配置文件所做的更改可能不适用直到下次登录到计算机，应用更改立即直接运行 shell 命令或使用下面的命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> <span class="token environment constant">$HOME</span>/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>验证是否已安装成功，输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>确认是否打印已安装的 Go 版本。</li></ul><hr><h2 id="升级-Go-版本"><a class="header-anchor" href="#升级-Go-版本">☃</a>升级 Go 版本</h2><hr><ul><li>进入 <a href="https://golang.google.cn/">Go 官网</a>下载安装包或者通过输入下面的命令进行安装。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://golang.google.cn/dl/go1.19.5.linux-amd64.tar.gz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>go<code>1.19.5</code> 是版本号。</p></blockquote><ul><li>在安装目录下，（以 root 用户身份或通过 sudo ）删除任何以前安装过的 Go 版本，通过删除 <code>/usr/local/go</code> 文件夹 (如果存在)，然后将下载的安装包解压到 <code>/usr/local</code> 目录中，创建一个新的转到 <code>/usr/local/go</code> 中的树，输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/local/go <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-C</span> /usr/local/ <span class="token parameter variable">-xzf</span> go1.19.5.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：不要将归档文件解压缩到现有的 <code>/usr/local/go</code> 树中，以免产生损坏的 Go 安装。</p></blockquote><ul><li>将 <code>/usr/local/go/bin</code> 添加到 <code>PATH</code> 环境变量，可以通过将以下行添加到 <code>$HOME/.profile</code> 或  <code>/etc/profile</code>（适用于系统范围的安装）：</li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">export PATH=$PATH:/usr/local/go/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>对配置文件所做的更改可能不适用直到下次登录到计算机，应用更改立即直接运行 shell 命令或使用下面的命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> <span class="token environment constant">$HOME</span>/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>验证是否已安装 Go ，输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="" alt=""></p><blockquote><p>GO 语言的环境变量的介绍。</p></blockquote><p><img src="https://tao7app.files.wordpress.com/2023/01/35810.png" alt="环境变量表"></p><hr><h2 id="卸载-Go"><a class="header-anchor" href="#卸载-Go">☃</a>卸载 Go</h2><hr><blockquote><p>使用下面的步骤从系统中删除 Go 。</p></blockquote><ul><li>删除 Go 目录下的全部文件，输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/local/go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>将 Go bin 目录移除 Go 的<code>PATH</code> 环境变量，编辑 <code>/etc/profile</code> 或 <code>$HOME/.profile</code> 配置文件。</p></li><li><p>对配置文件所做的更改可能不适用直到下次登录到计算机，应用更改立即直接运行 shell 命令或使用下面的命令：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> <span class="token environment constant">$HOME</span>/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><ul><li>参考 <a href="https://golang.org/doc/install?download#download">Go 官方网站</a></li></ul><hr><h1 id="Go-开发-IDE-工具安装和配置"><a class="header-anchor" href="#Go-开发-IDE-工具安装和配置">☃</a>Go 开发 IDE 工具安装和配置</h1><hr><hr><h2 id="Vim"><a class="header-anchor" href="#Vim">☃</a>Vim</h2><hr><ul><li>配置 vim 高亮显示，输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> <span class="token variable">$GOROOT</span>/misc/vim/* ~/.vim/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在 <code>~/.vimrc</code> 文件中增加语法高亮显示，添加如下内容：</li></ul><pre class="line-numbers language-none"><code class="language-none">filetype plugin indent onsyntax on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>安装 Gocode ，Gocode 默认安装到 <code>$GOBIN</code> 下，输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/nsf/gocode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>配置 Gocode ，依次执行下面的命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src/github.com/nsf/gocode/vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./update.bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gocode <span class="token builtin class-name">set</span> propose-builtins <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gocode <span class="token builtin class-name">set</span> lib-path <span class="token string">"/home/border/gocode/pkg/linux_amd64"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Gocode set 两个参数的含义说明：</p></blockquote><ul><li><p>propose-builtins：是否自动提示 Go 语言的内置函数、类型和常量，默认为 false ，不提示。</p></li><li><p>lib-path：默认情况下，Gocode 只会搜索 <code>$GOPATH/pkg/$GOOS_$GOARCH</code> 和 <code>$GOROOT/pkg/$GOOS_$GOARCH</code> 目录下的包，此设置可以设置额外的 <code>lib</code> 能访问的路径。</p></li></ul><hr><h2 id="SpaceVim-集成-IDE"><a class="header-anchor" href="#SpaceVim-集成-IDE">☃</a>SpaceVim 集成 IDE</h2><hr><p><strong>NeoVim</strong> 是基于  Vim 的一个 fork 分支，它主要解决了 Vim8 之前版本中的异步执行、开发模式等问题，对 Vim 的兼容性很好。同时对 Vim 的代码进行了大量地清理和重构，去掉了对老旧系统的支持，添加了新的特性。虽然 Vim8 后来也新增了异步执行等特性，在使用层面两者差异不大，但 NeoVim 开发更激进，新特性更多，架构也相对多。</p><blockquote><p>Vim IDE 的安装和配置主要为下面的步骤。</p></blockquote><ul><li>安装 NeoVim ，直接执行 <code>pip3</code> 和 <code>apt-get</code> 命令安装即可，安装方法如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pip3 <span class="token function">install</span> pynvim <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> neovim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>配置 <code>$HOME/.bashrc</code> ，先配置 nvim 的别名为 vi，这样当执行 vi 时，Linux系统就会默认调用 nvim 。同时，配置 <code>EDITOR</code> 环境变量可以使一些工具，如 Git 默认使用 nvim 。配置方法如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tee</span> <span class="token parameter variable">-a</span> <span class="token environment constant">$HOME</span>/.bashrc <span class="token operator">&lt;&lt;</span><span class="token string">'EOF'# Configure for nvimexport EDITOR=nvim # 默认的编辑器（git 会用到）alias vi="nvim"EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>检查 nvim 是否安装成功，通过查看 NeoVim 版本来确认是否成功安装，如果成功输出版本号，说明 NeoVim 安装成功，输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> <span class="token parameter variable">--version</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>输出如下形式说明 NeoVim 安装成功。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">NVIM <span class="token function">v</span><span class="token variable"><span class="token variable">`</span>x.x.x<span class="token variable">`</span></span> Build type: RelWithDebInfo<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>安装 marmotVim ，marmotVim 可以对 SpaceVim 的安装、卸载、打包等操作，安装步骤如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://marmotedu-1254073058.cos.ap-beijing.myqcloud.com/tools/marmotVim.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-xvzf</span> marmotVim.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> marmotVim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./marmotVimCtl <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SpaceVim 配置文件为：</p><p><code>HOME/.SpaceVim.d/init.toml</code> 和<code>HOME/.SpaceVim.d/autoload/custom_init.vim</code> ，SpaceVim 可自行配置（配置文件中有配置说明）：</p><ul><li><code>init.toml</code> ：SpaceVim 的配置文件。</li><li><code>SpaceVcustom_init.vim</code> ：兼容 vimrc ，用户自定义的配置文件。</li></ul><blockquote><p>SpaceVim Go IDE 常用操作的按键映射如下表所示。</p></blockquote><p><img src="https://tao7app.files.wordpress.com/2023/01/2829.png" alt="按键映射表"></p><ul><li>Go 工具安装，SpaceVim 会用到一些 Go 工具，比如在函数跳转时会用到 guru 、godef 工具，在格式化时会用到 SpaceVgoimports 等，安装步骤如下：</li></ul><blockquote><p>Vim 底线命令安装：<code>vi test.go</code> 。<br>执行 <code>:GoInstallBinaries</code> 安装。</p></blockquote><hr><h2 id="VS-Code"><a class="header-anchor" href="#VS-Code">☃</a>VS Code</h2><hr><blockquote><p><code>VS Code</code> 的下载和安装。</p></blockquote><ul><li><p>下载安装 <code>VS Code</code> <a href="https://code.visualstudio.com/Download">官方下载地址</a>，点击运行。</p></li><li><p>点击左侧菜单栏最后一项 <code>管理扩展</code> ，在 <code>搜索框</code> 中输入 <code>chinese</code>  ，选中结果列表第一项，点击 <code>install</code> 安装。</p></li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs0.gif" alt="安装简体中文插件"></p><ul><li>安装完成后右下角会提示重启 <code>VS Code</code> ，重启之后，<code>VS Code</code> 就可中文显示了！</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs1.png" alt="VS Code 中文主页面"></p><ul><li>为 VS Code 编辑器安装 <code>Go</code> 语言扩展插件，让它支持 Go 语言开发。</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs2.png" alt="安装 Go 扩展"></p><ul><li>添加 Go 语言开发如代码提示、代码自动补全等功能,在此之前先设置 <code>GOPROXY</code> ，打开终端执行以下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Windows 平台按下 <code>Ctrl+Shift+P</code> ，Mac 平台按 <code>Command+Shift+P</code> 。</p></blockquote><ul><li>此时 <code>VS Code</code> 界面会弹出一个输入框，在输入框中输入 <code>&gt;go:install</code> ，下面会自动搜索相关命令，选择 <code>Go:Install/Update Tools</code> 这个命令，按照下图选中并回车执行该命令（或者使用鼠标点击该命令）。</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs5.png" alt="输入框页面"></p><ul><li>在弹出的窗口选中所有并点击 <code>确定</code> 按钮，进行安装。</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs6.png" alt="勾选页面"></p><ul><li>然后会弹出如下所示的窗口，等待工具安装完成。</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs7.png" alt="安装页面"></p><blockquote><p>配置 <code>VS Code</code> 自动保存功能。</p></blockquote><ul><li>按下图依次点击  <code>文件 -&gt; 首选项 -&gt; 设置</code> 。</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs8.png" alt="设置页面"></p><ul><li>打开设置页面就可以看见自动保存相关配置，选择自动保存的方式。</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs8.png" alt="选择保存页面"></p><blockquote><p>配置 <code>VS Code</code> 代码片段快捷键。</p></blockquote><ul><li>按 <code>Ctrl/Command+Shift+P</code> ,按下图输入 <code>&gt;snippets</code> ，选择命令并执行，在弹出的窗口点击选择 <code>Go</code> 选项。</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs10.png" alt="设置页面"></p><ul><li>弹出如下页面，填写配置。</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs11.png" alt="快捷键配置页面"></p><blockquote><p>上图的注释介绍了主要的用法。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">“这里放个名字”</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token string-property property">"prefix"</span><span class="token operator">:</span> <span class="token string">"这是快捷键"</span><span class="token punctuation">,</span>    <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token string">"这里是按快捷键插入的代码片段"</span><span class="token punctuation">,</span>    <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">"这里放提示信息的描述"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>$0</code> 表示最终光标提留的位置。 例如在这里创建两个快捷方式，一个是输入 <code>pln</code> 就会在编辑器中插入 <code>fmt.Println()</code> 代码；另一个是输入 <code>plf</code> ，就会插入 <code>fmt.Printf("")</code> 代码。具体配置如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"println"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"pln"</span><span class="token punctuation">,</span><span class="token property">"body"</span><span class="token operator">:</span><span class="token string">"fmt.Println($0)"</span><span class="token punctuation">,</span><span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"println"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"printf"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"plf"</span><span class="token punctuation">,</span><span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"fmt.Printf(\"$0\")"</span><span class="token punctuation">,</span><span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"printf"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将上面的代码，按下图方式粘贴到配置文件中，保存并关闭配置文件。</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs12.png" alt="具体配置页面"></p><blockquote><p>改变 <code>VS Code</code> 编辑器的主题。</p></blockquote><ul><li>点击 <code>设置 -&gt; 颜色主题</code> 。</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs3.png" alt="设置颜色主题"></p><ul><li>弹出如下窗口，选择对应的主题即可。</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/vs4.png" alt="选择主题页面"></p><hr><ul><li>参考 <a href="http://go.p2hp.com/">Go 中文网</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Golang </category>
          
          <category> VS Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
            <tag> Golang </tag>
            
            <tag> VS Code </tag>
            
            <tag> Go </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mermaid 配置及绘制流程图</title>
      <link href="/posts/44895.html"/>
      <url>/posts/44895.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Mermaid-插件的安装"><a class="header-anchor" href="#Mermaid-插件的安装">☃</a>Mermaid 插件的安装</h1><hr><hr><h2 id="卸载-Hexo-默认的渲染器"><a class="header-anchor" href="#卸载-Hexo-默认的渲染器">☃</a>卸载 Hexo 默认的渲染器</h2><hr><p>默认的 Hexo 安装包括一个 MarkDown 渲染器插件，该插件使用 <code>hexo-renderer-marked</code>  ，而 <code>hexo-renderer-markdown-it</code> 是一款用于 Markdown 解析和渲染的插件，用于替换 Hexo 默认自带的 Markdown 渲染器，提供了更丰富的 Markdown 解析和渲染，替换命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> un hexo-renderer-marked <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-renderer-markdown-it <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="添加-Mermaid-支持"><a class="header-anchor" href="#添加-Mermaid-支持">☃</a>添加 Mermaid 支持</h2><hr><p><a href="https://mermaid-js.github.io/mermaid/">Mermaid</a> 是一个支持 MarkDown 的流行的 <code>js</code> 图标库。具有直接在Markdown中画流程图，甘特图，序列图等功能。</p><ul><li>使用  <code>hexo-tag-mermaid</code> 或者 <code>hexo-filter-mermaid-diagrams</code> 的 Hexo 插件来实现相应的功能，在 Hexo 根目录执行如下命令安装：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-tag-mermaid <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-mermaid-diagrams <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改在 Matery 主题 <code>/layout/_partial/</code> 目录下的 <code>footer.ejs</code> 文件，文末添加如下内容：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>mermaid<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">'https://unpkg.com/mermaid@&lt;%= theme.mermaid.version %&gt;/dist/mermaid.min.js'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>mermaid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      mermaid<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">'forest'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 Matery 主题和 Hexo 根目录文件下 <code>_config.yml</code> 配置文件添加如下内容：</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># mermaid chart。 依赖hexo-tag-mermaid</span><span class="token key atrule">mermaid</span><span class="token punctuation">:</span> <span class="token comment">## mermaid url https://github.com/knsv/mermaid</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># default false</span>  <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"latest"</span> <span class="token comment"># default v7.1.2</span>  <span class="token key atrule">options</span><span class="token punctuation">:</span>  <span class="token comment"># find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span>    <span class="token comment">#startOnload: true  // default true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，使用如下方式编写博客。</p><ul><li>tag 标签。</li></ul><blockquote><p>在博文中填写 mermaid 语句，使用 <code>{%`  mermaid 正文内容 `%}</code> 包裹（适用于 Hexo编写博文）。</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">{% mermaid %}[mermaid 语句正文]{% endmermaid %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>mermaid 代码块。</li></ul><blockquote><p>在博文中填写 mermaid 语句，使用 MarkDown 代码块 [mermaid 正文内容] 包裹（适用于 CSDN 及其它 MarkDown 编辑器编写博文）。</p></blockquote><hr><h2 id="Mermaid-的配置"><a class="header-anchor" href="#Mermaid-的配置">☃</a>Mermaid 的配置</h2><hr><p><code>hexo-renderer-markdown-it</code> 的所有配置，均在 Hexo 的根目录下配置文件<code>_config.yml</code> 中进行配置。</p><hr><h3 id="简单配置"><a class="header-anchor" href="#简单配置">☃</a>简单配置</h3><hr><p><code>hexo-renderer-markdown-it</code> 提供三种简单配置方式（配置级别）zero 、default 、commonmark 。</p><p>在 Hexo 的_config.yml 文件中可以配置以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Markdown-it config</span><span class="token comment"># markdown: 'zero'</span><span class="token comment"># markdown: 'default'</span><span class="token comment"># markdown: 'commonmark'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>每种简单配置其默认的一些设置：</p><ul><li>zero ：禁用大多数解析器功能。仅支持斜体和粗体，甚至不支持所有原始 MarkDown 功能。</li><li>default（GFM）：解析器的行为类似于 GitHub 规范。</li><li>commonmark ：提供比 zero 预设更多的功能， 此设置将强制插件使用最新的 CommonMark 规范。</li></ul><blockquote><p>==警告== ：选择一种简单配置，将阻止您使用任何附带的插件。</p></blockquote><hr><h3 id="高级配置"><a class="header-anchor" href="#高级配置">☃</a>高级配置</h3><hr><p><code>hexo-renderer-markdown-it</code> 提供的高级配置，是对简单配置的详细定制。在 Hexo 的根目录下 <code>_config.yml</code> 文件中配置以下内容（官方提供的完整配置，没有特殊需要不用再次修改）。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Markdown-it config</span><span class="token key atrule">markdown</span><span class="token punctuation">:</span>  <span class="token key atrule">render</span><span class="token punctuation">:</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">xhtmlOut</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">breaks</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">linkify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">typographer</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">quotes</span><span class="token punctuation">:</span> <span class="token string">'“”‘’'</span>  <span class="token key atrule">plugins</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>abbr    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>footnote    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>ins    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>sub    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>sup  <span class="token key atrule">anchors</span><span class="token punctuation">:</span>    <span class="token key atrule">level</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">collisionSuffix</span><span class="token punctuation">:</span> <span class="token string">'v'</span>    <span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">permalinkClass</span><span class="token punctuation">:</span> header<span class="token punctuation">-</span>anchor    <span class="token key atrule">permalinkSymbol</span><span class="token punctuation">:</span> ¶ <span class="token comment"># anchors 符号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>渲染器（render）</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Markdown-it config</span><span class="token key atrule">markdown</span><span class="token punctuation">:</span>  <span class="token key atrule">render</span><span class="token punctuation">:</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">xhtmlOut</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">breaks</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">linkify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">typographer</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">quotes</span><span class="token punctuation">:</span> <span class="token string">'“”‘’'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>html ：定义文档中的 HTML 内容是否应转义或传递给最终结果。</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 不转义 HTML 内容</span><span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 转义 HTML 内容，使标签作为文本输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>xhtmlOut ：定义解析器是否将导出完全兼容 XHTML 的标记。</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">xhtmlOut</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 必须使用完全的 XHTML 代码，换行必须为 </span><span class="token key atrule">xhtmlOut</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 不必必使用完全的 XHTML 代码，换行可以为 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>breaks ：使源文件中的换行符被解析为标记，每次按 Enter 键都会创建换行符。</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">breaks</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 每次会车换行相当于一个标签</span><span class="token key atrule">breaks</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Pa,每次会车换行会被忽略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>linkify ：解析器能够将直接粘贴到文本中的链接内联。</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">linkify: true # 类似链接的文本，作为链接输出linkify: false # 类似链接的文本，依然作为文本输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>typographer：可以替换常见的排版元素。</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">typographer: true # 替换常见的排版元素typographer: false # 不替换常见的排版元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>quotes ：定义单引号、双引号如何被替换。</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">quotes: '“”‘’' # 'single'、"double" 变成 ‘single’、“double”quotes: '«»“”' # 'single'、"double" 变成 “single”、«single»<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>插件（plugins）</li></ol><p>hexo-renderer-markdown-it 默认集成 5 个markdown-it 插件。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Markdown-it config</span><span class="token key atrule">markdown</span><span class="token punctuation">:</span>  <span class="token key atrule">plugins</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>abbr    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>footnote    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>ins    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>sub    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>sup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>markdown-it-abbr ：缩写插件。</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">[HTML]: Hyper Text Markup Language</span><span class="token punctuation">*</span></span><span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">W3C</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  World</span> Wide Web ConsortiumThe HTML specificationis maintained by the W3C.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>markdown-it-footnote ：脚注插件。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">basic footnote[^1]here is an inline footnote[^2](inline footnote)and another one[^3]and another one[^4][^1]: basic footnote content[^3]: paragraph footnote content[^4]: footnote content with some [markdown](https://en.wikipedia.org/wiki/Markdown)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>markdown-it-ins ：插入插件（下划线插件）。</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">++inserted++ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><ins>inserted</ins></p><blockquote><p>markdown-it-sub：下标插件。</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">H<span class="token strike"><span class="token punctuation">~</span><span class="token content">2</span><span class="token punctuation">~</span></span>O =&gt; H2O<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>H<sub>2</sub>0</p><blockquote><p>markdown-it-sup ：上标插件。</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">e^th^ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>e<sup>th</sup></p><ol start="3"><li>锚（anchors）</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Markdown-it config</span><span class="token key atrule">markdown</span><span class="token punctuation">:</span>  <span class="token key atrule">anchors</span><span class="token punctuation">:</span>    <span class="token key atrule">level</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">collisionSuffix</span><span class="token punctuation">:</span> <span class="token string">'v'</span>    <span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">permalinkClass</span><span class="token punctuation">:</span> header<span class="token punctuation">-</span>anchor    <span class="token key atrule">permalinkSymbol</span><span class="token punctuation">:</span> ¶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>level ：生成 Heading ID 的标题等级。</p></blockquote><ul><li><p>collisionSuffix ：Heading ID 重复时，数字的后缀</p></li><li><p>permalink ：‘true’ ，则创建一个锚标记，除标题外还有一个固定链接</p></li><li><p>permalinkClass ：用于固定链接锚标记的样式</p></li><li><p>permalinkSymbol ：用于固定链接标记的符号</p></li></ul><hr><ul><li>参考 <a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it 官网</a></li></ul><hr><h1 id="绘制流程图"><a class="header-anchor" href="#绘制流程图">☃</a>绘制流程图</h1><hr><hr><h2 id="简介"><a class="header-anchor" href="#简介">☃</a>简介</h2><hr><p>所有流程图都由 <code>节点</code> 、<code>几何形状</code> 和 <code>边</code> 、<code>箭头</code> / <code>线</code> 组成。mermaid 定义了这些节点和边的制作和交互方式，还支持不同类型的箭头、多方向箭头以及与子图的连接。</p><hr><h2 id="节点"><a class="header-anchor" href="#节点">☃</a>节点</h2><hr><ul><li>默认节点。</li></ul><p>默认节点展示在方格中，作为节点对象，也作为节点的名字。</p><pre class="mermaid">flowchart LR    节点/文本</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    节点/文本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>重命名节点。</li></ul><p>默认节点对象就是节点的名称，可以使用 <code>node[</code>xxx<code>]</code> 的形式来设置节点的别名。</p><pre class="mermaid">flowchart LR    node[框中的文本]</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    node[框中的文本]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><hr><h2 id="流程图展开的方向"><a class="header-anchor" href="#流程图展开的方向">☃</a>流程图展开的方向</h2><hr><ul><li>设置从上到下的方向（TD or TB）。</li></ul><pre class="mermaid">flowchart TD     开始 --&gt; 结束</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TD    开始 --&gt; 结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>设置从左到右的方向（LR）。</li></ul><pre class="mermaid">flowchart LR    开始 --&gt; 结束</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    开始 --&gt; 结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>设置从下到上的方向（DT or BT）。</li></ul><pre class="mermaid">flowchart BT     开始 --&gt; 结束</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart BT    开始 --&gt; 结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>设置从右到左的方向（RL）。</li></ul><pre class="mermaid">flowchart RL    开始 --&gt; 结束</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart RL    开始 --&gt; 结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><blockquote><p>流程图的展开方向总结如下表:</p></blockquote><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">说明</th><th style="text-align:center">流程图展开方向</th></tr></thead><tbody><tr><td style="text-align:center"><code>TB</code></td><td style="text-align:center">top to bottom</td><td style="text-align:center">上到下</td></tr><tr><td style="text-align:center"><code>TD</code></td><td style="text-align:center">top-down/same as top to bottom</td><td style="text-align:center">上到下</td></tr><tr><td style="text-align:center"><code>BT</code></td><td style="text-align:center">bottom to top</td><td style="text-align:center">下到上</td></tr><tr><td style="text-align:center"><code>RL</code></td><td style="text-align:center">right to left</td><td style="text-align:center">右到左</td></tr><tr><td style="text-align:center"><code>LR</code></td><td style="text-align:center">left to right</td><td style="text-align:center">左到右</td></tr></tbody></table><hr><h2 id="节点的形状"><a class="header-anchor" href="#节点的形状">☃</a>节点的形状</h2><hr><ul><li>矩形节点。</li></ul><pre class="mermaid">flowchart LR     矩形节点</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR     矩形节点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><pre class="mermaid">flowchart LR    node[矩形节点]</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart RL    node[矩形节点]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>圆角边形节点。</li></ul><pre class="mermaid">flowchart LR    node(圆角边节点)</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    node(圆角边节点)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>球场形节点。</li></ul><pre class="mermaid">flowchart LR    node([体育场状节点])</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    node([体育场状节点])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>子程序形节点。</li></ul><pre class="mermaid">flowchart LR    node[[ 子程序形节 ]]</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    node[[子程序形节点]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>圆柱形节点。</li></ul><pre class="mermaid">flowchart LR    node[(圆柱形节点)]</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    node[(圆柱形节点)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>圆形节点。</li></ul><pre class="mermaid">flowchart LR    node((圆形节点))</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    node((圆形节点))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>非对称形节点。</li></ul><pre class="mermaid">flowchart LR    node&gt;非对称形节点]</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    node&gt;非对称形节点]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>菱形节点。</li></ul><pre class="mermaid">flowchart LR    node{菱形节点}</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    node{菱形节点}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>六角形节点。</li></ul><pre class="mermaid">flowchart LR    node</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    node{{六角形节点}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>平行四边形节点。</li></ul><pre class="mermaid">flowchart TD    node1[/平行四边形/]    node2[\平行四边形\]</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TD    node1[/平行四边形/]    node2[\平行四边形\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ul><li>梯形节点。</li></ul><pre class="mermaid">flowchart TD    A[/上梯形\]    B[\下梯形/]</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TD    A[/上梯形\]    B[\下梯形/]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ul><li>环形节点。</li></ul><pre class="mermaid">flowchart TD    node((环形节点))</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TD    node((环形节点))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><blockquote><p>节点形状总结如下表：</p></blockquote><table><thead><tr><th style="text-align:center">形状</th><th style="text-align:center">Mermaid 符号</th></tr></thead><tbody><tr><td style="text-align:center">矩形</td><td style="text-align:center"><code>xxx</code> / <code>node[xxx]</code></td></tr><tr><td style="text-align:center">圆形</td><td style="text-align:center"><code>(xxx)</code></td></tr><tr><td style="text-align:center">球场形</td><td style="text-align:center"><code>([xxx])</code></td></tr><tr><td style="text-align:center">子程序形</td><td style="text-align:center"><code>[[xxx]]</code></td></tr><tr><td style="text-align:center">圆柱形</td><td style="text-align:center"><code>[(xxx)]</code></td></tr><tr><td style="text-align:center">非对称形</td><td style="text-align:center"><code>&gt;xxx]</code></td></tr><tr><td style="text-align:center">菱形</td><td style="text-align:center"><code>{xxx}</code></td></tr><tr><td style="text-align:center">六角形</td><td style="text-align:center"><code>{{xxx}}</code></td></tr><tr><td style="text-align:center">平行四边形</td><td style="text-align:center"><code>[/xxx/]</code> / <code>[\xxx\]</code></td></tr><tr><td style="text-align:center">梯形</td><td style="text-align:center"><code>[/xxx\]</code> / <code>[\xxx/]</code></td></tr><tr><td style="text-align:center">环形</td><td style="text-align:center"><code>((xxx))</code></td></tr></tbody></table><hr><h2 id="节点间的连接"><a class="header-anchor" href="#节点间的连接">☃</a>节点间的连接</h2><hr><p>可以连接两个节点通过一条线，可以设置不同类型的线和带有文字的线，节点可以使用<code>链接/边</code>连接，可以具有不同类型的链接或将文本字符串附加到链接。</p><ul><li>实线直接连接。</li></ul><pre class="mermaid">flowchart LR    A --- B</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    A --- B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>单方向箭头的实线连接。</li></ul><ol><li>从左到右方向。</li></ol><pre class="mermaid">flowchart LR    A--&gt;B</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    A--&gt;B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>2.从右到左方向。</p><pre class="mermaid">flowchart RL    A--&gt;B</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart RL    A--&gt;B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ol start="3"><li>从上到下方向。</li></ol><pre class="mermaid">flowchart TB    A--&gt;B</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TB    A--&gt;B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ol start="4"><li>从下到上方向。</li></ol><pre class="mermaid">flowchart BT    A--&gt;B</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart BT    A--&gt;B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>带文本的节点连接。</li></ul><pre class="mermaid">flowchart LR    A-- 文本 ---B     A---|文本|B</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    A-- 文本 ---B    A---|文本|B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ul><li>单方向箭头的文本线。</li></ul><ol><li>从左到右方向。</li></ol><pre class="mermaid">flowchart LR    A--&gt;|文本|B    A-- 文本 --&gt;B</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    A--&gt;|文本|B    A-- 文本 --&gt;B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ol start="2"><li>从右到左方向。</li></ol><pre class="mermaid">flowchart RL    A--&gt;|文本|B    A-- 文本 --&gt;B</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart RL    A--&gt;|文本|B    A-- 文本 --&gt;B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ol start="3"><li>从上到下方向。</li></ol><pre class="mermaid">flowchart TB    A--&gt;|文本|B    A-- 文本 --&gt;B</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TB    A--&gt;|文本|B    A-- 文本 --&gt;B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ol start="4"><li>从下到上方向。</li></ol><pre class="mermaid">flowchart BT    A--&gt;|文本|B    A-- 文本 --&gt;B</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart BT    A--&gt;|文本|B    A-- 文本 --&gt;B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ul><li>虚线和带文本的虚线。</li></ul><ol><li>水平方向。</li></ol><pre class="mermaid">flowchart LR   A-.-&gt;B   B-. 文本 .-&gt;A</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR   A-.-&gt;B   B-. 文本 .-&gt; A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ol start="2"><li>竖直方向。</li></ol><pre class="mermaid">flowchart TB   A-.-&gt;B   B-. 文本 .-&gt;A</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TB   A-.-&gt;B   B-. 文本 .-&gt; A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ul><li>加粗线。</li></ul><ol><li>水平方向。</li></ol><pre class="mermaid">flowchart LR   A ==&gt; B   B== 文本 ==&gt; A</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR   A ==&gt; B   B == 文本 ==&gt; A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ol start="2"><li>竖直方向。</li></ol><pre class="mermaid">flowchart TB   A ==&gt; B   B== 文本 ==&gt; A</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TB   A ==&gt; B   B == 文本 ==&gt; A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ul><li>自定义的箭头类型。</li></ul><pre class="mermaid">flowchart LR    A --o B    B --x C</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdowd" data-language="markdowd"><code class="language-markdowd">flowchart LR    A --o B    B --x C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ul><li>双方向的箭头。</li></ul><pre class="mermaid">flowchart LR    A o--o B    B &lt;--&gt; C    C x--x D</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    A o--o B    B <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span><span class="token punctuation">&gt;</span></span> C    C x--x D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>节点间的连接线长度方向及类型汇总表如下：</p></blockquote><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">长度 1</th><th style="text-align:center">长度 2</th><th style="text-align:center">长度 3</th></tr></thead><tbody><tr><td style="text-align:center">实线</td><td style="text-align:center"><code>--</code></td><td style="text-align:center"><code>---</code></td><td style="text-align:center"><code>----</code></td></tr><tr><td style="text-align:center">带箭头的实线</td><td style="text-align:center"><code>--&gt;</code></td><td style="text-align:center"><code>&lt;---</code></td><td style="text-align:center"><code>----&gt;</code></td></tr><tr><td style="text-align:center">加粗线</td><td style="text-align:center"><code>===</code></td><td style="text-align:center"><code>====</code></td><td style="text-align:center"><code>=====</code></td></tr><tr><td style="text-align:center">带箭头的加粗线</td><td style="text-align:center"><code>==&gt;</code></td><td style="text-align:center"><code>&lt;===</code></td><td style="text-align:center"><code>&lt;====&gt;</code></td></tr><tr><td style="text-align:center">虚线</td><td style="text-align:center"><code>-.-</code></td><td style="text-align:center"><code>-..-</code></td><td style="text-align:center"><code>-...-</code></td></tr><tr><td style="text-align:center">带箭头的虚线</td><td style="text-align:center"><code>-.-&gt;</code></td><td style="text-align:center"><code>&lt;-..-</code></td><td style="text-align:center"><code>&lt;-...-&gt;</code></td></tr></tbody></table><ul><li>连接链。</li></ul><p>一行中（多个节点）可以声明多条线。</p><pre class="mermaid">flowchart LR   A -- 文本 --&gt; B -- 文本 --&gt; C</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR   A -- 文本 --&gt; B -- 文本 --&gt; C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>可以在同一行中声明多个节点链路。</p><pre class="mermaid">flowchart LR   A --&gt; B &amp; C--&gt; D</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR   A --&gt; B &amp; C--&gt; D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>可以在一行中描述一个依赖关系。</p><pre class="mermaid">flowchart TB    A &amp; B--&gt; C &amp; D</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdwon" data-language="markdwon"><code class="language-markdwon">flowchart TB    A &amp; B--&gt; C &amp; D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>上图关系如果使用基本语法描述同一个图，则需要四行进行描述。</p><pre class="mermaid">flowchart TB    A --&gt; C    A --&gt; D    B --&gt; C    B --&gt; D</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TB    A --&gt; C    A --&gt; D    B --&gt; C    B --&gt; D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>链路的最小长度。</li></ul><p>流程图中的每个节点最终根据它所链接的节点被分配到所呈现的图中的等级，即分配到垂直或水平级别(取决于流程图方向)。默认情况下，连接可以跨越任意数量的列组，但是您可以通过在链接定义中添加额外的短划线来要求任何链接比其他链接长。</p><p>在下面的示例中，在来自节点的链接中添加了两个额外的破折。</p><pre class="mermaid">flowchart TD    A[Start] --&gt; B{Is it?}    B --&gt;|Yes| C[OK]    C --&gt; D[Rethink]    D --&gt; B    B ----&gt;|No| E[End]</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TD    A[Start] --&gt; B{Is it?}    B --&gt;|Yes| C[OK]    C --&gt; D[Rethink]    D --&gt; B    B ----&gt;|No| E[End]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>当链接标签写在链接的中间时，必须在链接的右侧添加额外的破折号，以下示例与前面的示例等效。</p><pre class="mermaid">flowchart TD    A[Start] --&gt; B{Is it?}    B -- Yes --&gt; C[OK]    C --&gt; D[Rethink]    D --&gt; B    B -- No ----&gt; E[End]</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-mardown" data-language="mardown"><code class="language-mardown">flowchart TD    A[Start] --&gt; B{Is it?}    B -- Yes --&gt; C[OK]    C --&gt; D[Rethink]    D --&gt; B    B -- No ----&gt; E[End]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>破坏语法的特殊字符。</li></ul><p>为了呈现更麻烦的字符，可以将文本放在引号中。</p><pre class="mermaid">flowchart LR    node["重庆(邮电)大学 "]</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    node["重庆(邮电)大学 "]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><ul><li>转义字符的实体代码。</li></ul><p>可以使用此处示例的语法转义字符。</p><pre class="mermaid">    flowchart LR        A["A double quote:#quot;"] --&gt;B["A dec char:#9829;"]</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR    A["A double quote:#quot;"] --&gt;B["A dec char:#9829;"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>给出的数字以 10 为基数，所以 # 可编码为#35;，还支持使用HTML 字符名称。</p></blockquote><hr><h2 id="子图"><a class="header-anchor" href="#子图">☃</a>子图</h2><hr><ul><li>mermaid 定义子图使用下面的方式。</li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">subgraph title    graph definitionend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面是一个例子。</p><pre class="mermaid">flowchart TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>为子图设置显式 ID 。</li></ul><p>子图设置显示 ID 可以使用下面的方式。</p><pre class="mermaid">flowchart TB    c1--&gt;a2    subgraph ide1 [xxx]    a1--&gt;a2    end</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TB    c1--&gt;a2    subgraph ide1 [xxx]    a1--&gt;a2    end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>设置子图的边。</li></ul><p>使用图形类型流程图，还可以如下面的流程图中那样设置子图的边和子图的边。</p><pre class="mermaid">flowchart TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end    one --&gt; two    three --&gt; two    two --&gt; c2</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end    one --&gt; two    three --&gt; two    two --&gt; c2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>设置子图方向。</li></ul><p>在 graphtype 流程图中，可以使用方向语句（direction RL/LR/TB/BT）来设置子图将呈现的方向。</p><pre class="mermaid">flowchart LR  subgraph TOP    direction TB    subgraph B1        direction RL        i1 --&gt;f1    end    subgraph B2        direction BT        i2 --&gt;f2    end  end  A --&gt; TOP --&gt; B  B1 --&gt; B2</pre><blockquote><p>mermaid 语法如下：</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">flowchart LR  subgraph TOP    direction TB    subgraph B1        direction RL        i1 --&gt;f1    end    subgraph B2        direction BT        i2 --&gt;f2    end  end  A --&gt; TOP --&gt; B  B1 --&gt; B2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>参考 <a href="https://mermaid.js.org/syntax/flowchat.html">Mermaid 官网教程</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 软件工具的使用系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Mermaid </tag>
            
            <tag> 流程图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/posts/14373.html"/>
      <url>/posts/14373.html</url>
      
        <content type="html"><![CDATA[<p>flowchart TB<br>node<br>A–&gt;B</p><hr><p>graph TD;<br>A–&gt;B;<br>A–&gt;C;<br>B–&gt;D;<br>C–&gt;D;</p><hr><pre class="mermaid">graph TD;    A--&gt;B;    A--&gt;C;    B--&gt;D;    C--&gt;D;</pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 搭建个人博客和 Matery 主题配置优化</title>
      <link href="/posts/45644.html"/>
      <url>/posts/45644.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Hexo-的安装"><a class="header-anchor" href="#Hexo-的安装">☃</a>Hexo 的安装</h1><hr><p><a href="https://hexo.io/themes/">Hexo</a> 是一款基于 Node.js 的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 GitHub 、Gitee 上，是搭建博客的首选框架。</p><hr><h2 id="安装-Git"><a class="header-anchor" href="#安装-Git">☃</a>安装 Git</h2><hr><p>Git 是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token parameter variable">-y</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="安装-Node-js"><a class="header-anchor" href="#安装-Node-js">☃</a>安装 Node.js</h2><hr><p>Hexo 是基于 Node.js 编写的，所以需要安装一下 Node.js 和 npm 工具，Node.js 默认包含 npm 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> nodejs <span class="token function">npm</span> <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后，输入如下命令，检查是否安装成功。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>升级 npm 到最新版本，更换 npm 源为淘宝源。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="升级-Node-js-版本"><a class="header-anchor" href="#升级-Node-js-版本">☃</a>升级 Node.js 版本</h2><hr><ul><li>清除 npm 缓存。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> cache clean <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装 Node.js 版本管理工具 n 。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> n <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看 Node.js 所有版本。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> view <span class="token function">node</span> versions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>升级 Node.js 版本。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 升级到指定的版本：n 版本号</span>n <span class="token number">16.0</span>.0<span class="token comment"># 升级到最新的稳定版本</span>n stable<span class="token comment"># 升级到最新版本，不推荐</span>n latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 <code>node -v</code> 查看 Node.js 版本，如果版本号改变为想要的则升级成功。如果版本号没变，可以重启机器或者尝试以下方法：</p><ol><li>查看安装 Node.js 的位置，输入如下命令后显示 Node.js 的安装路径。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> <span class="token function">node</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/usr/local/n/versions/node/16.0.0 // 具体的安装路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>配置环境变量，进入该位置。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/n/versions/node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>编辑 <code>/etc/profile</code> ，将 Node.js 安装的环境变量添加到文件末尾。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NODE_HOME</span><span class="token operator">=</span>/usr/local/n/versions/node/16.0.0 // <span class="token number">16.0</span>.0 是Node.js 的版本号<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$NODE_HOME</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>保存文件，再刷新 <code>/etc/profile</code> 使配置生效，输入如下命令。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="安装-Hexo"><a class="header-anchor" href="#安装-Hexo">☃</a>安装 Hexo</h2><hr><p>前面 Git 和 Node.js 安装好后，就可以正式进行安装 Hexo 。</p><ol><li>安装 Hexo 。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看版本信息 。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="升级-Hexo-版本"><a class="header-anchor" href="#升级-Hexo-版本">☃</a>升级 Hexo 版本</h2><hr><ul><li>安装 npm-check 和 npm-upgrade ，<code>-g</code> 是全局安装，输入如下命令。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> npm-check npm-upgrade <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>检查本地插件版本。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm-check<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>交互式升级，根据提示选择要升级的工具。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>按照提示选择后会更新 <code>package.json</code> 文件，输入如下命令进行升级。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>正确运行后 Hexo 及插件已经升级成功，执行 hexo version 查看版本。</p></blockquote><hr><h2 id="初始化-Hexo"><a class="header-anchor" href="#初始化-Hexo">☃</a>初始化 Hexo</h2><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init filename（文件名随意定义）<span class="token builtin class-name">cd</span> filename //进入这个文件夹<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>hexo init</li></ul><blockquote><p>说明：自动在文件夹（filename）中创建项目所需的文件。</p></blockquote><ul><li>cd filename</li></ul><blockquote><p>说明：将操作位置转移到将要存放项目的文件夹目录。</p></blockquote><ul><li>npm install</li></ul><blockquote><p>说明：安装依赖包。</p></blockquote><p>上述步骤操作完成后，指定 Hexo 根目录下有如下文件：</p><p><img src="https://tao7app.files.wordpress.com/2023/01/img_20230110_111336.png" alt="Hexo 目录文件"></p><ul><li><code>_config.yml</code> ：站点的配置文件，需要备份。</li><li><code>themes</code> ：主题文件夹，需要备份。</li><li><code>source</code> ：资源文件夹。用来存放图片、Markdown 文档（文章、草稿）、各种页面（分类、关于页面等），需要备份。</li><li><code>scaffolds</code> ：文章的模板，需要备份。</li><li><code>package.json</code> ：安装包的名称，需要备份。</li><li><code>.gitignore</code> ：限定在 push 时哪些文件可以忽略，需要备份 .git ：主题和站点都有，标志这是一个 git 项目，不需要备份。</li><li><code>node_modules</code> ：是安装包的目录，在执行 npm install 的时候会重新生成，不需要备份。</li><li><code>public</code> ：hexo g 生成的静态网页，将 source 文件夹里的 MarkDown 文档，转换成 index.html，不需要备份。</li><li><code>deploy_git</code> ：将 public 文件夹的内容提交到 GitHub 后生成，内容与 public 文件夹基本一致，不需要备份。</li><li><code>db.json</code> ：文件，不需要备份。</li></ul><hr><h2 id="启动-Hexo-服务"><a class="header-anchor" href="#启动-Hexo-服务">☃</a>启动 Hexo 服务</h2><hr><p>正确安装完成后便按照下面操作启动 Hexo 博客。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate <span class="token comment"># 生成静态页面至 public 目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server <span class="token comment"># 开启预览访问端口（默认端口 4000 ，ctrl + c 关闭 server ）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tao7app.files.wordpress.com/2023/01/screenshot_2023_0110_211105.png" alt="启动 Hexo 服务页面"></p><p>打开浏览器输入对应的网址 <strong><a href="http://localhost:4000">http://localhost:4000</a></strong> ，就可以看到生成的博客。</p><p><img src="https://tao7app.files.wordpress.com/2023/01/img_20230108_005221.png" alt="Hexo 博客首页"></p><hr><h1 id="Hexo-部署到-GitHub"><a class="header-anchor" href="#Hexo-部署到-GitHub">☃</a>Hexo 部署到 GitHub</h1><hr><hr><h2 id="在-GitHub-官网上创建个人仓库"><a class="header-anchor" href="#在-GitHub-官网上创建个人仓库">☃</a>在 GitHub 官网上创建个人仓库</h2><hr><p>登录 <a href="https://github.com/">GitHub 官网</a>，点击右上角加号，点击 New Repository ，新建仓库。</p><p><img src="https://tao7app.files.wordpress.com/2022/12/screenshot_2020_0801_1453048826363041159371369.png" alt="新建仓库页面"></p><p>创建一个和账号名相同的仓库（即 <strong><a href="http://xxx.github.io">http://xxx.github.io</a></strong> ，其中 <code>xxx</code> 是 github 的账号名），点击 Greate Repository 创建。</p><p><img src="https://tao7app.files.wordpress.com/2022/12/screenshot_2020_0801_1456556257341474192203571.png" alt="创建仓库页面"></p><hr><h2 id="Git-初始化设置"><a class="header-anchor" href="#Git-初始化设置">☃</a>Git 初始化设置</h2><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的 github 账号名"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"你的 github 邮箱号"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="查看设置是否正确"><a class="header-anchor" href="#查看设置是否正确">☃</a>查看设置是否正确</h2><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="生成-SSH-公钥添加到-GitHub"><a class="header-anchor" href="#生成-SSH-公钥添加到-GitHub">☃</a>生成 SSH 公钥添加到 GitHub</h2><hr><ul><li>创建 SSH Key ，默认回车，输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"你的邮箱号"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><img src="https://tao7app.files.wordpress.com/2022/12/img_20200802_1139583858709568397913356.jpg" alt="生成 SSH key 页面"></p><ul><li>查看 SSH key ，输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tao7app.files.wordpress.com/2022/12/img_20200803_0950183625923031218189922.jpg" alt="SSH key 内容"></p><ul><li>复制 <code>id_rsa.pub</code> 里面的全部内容，在 GitHub 的 Setting 中，找到 SSH and GPG keys 的设置选项，点击 New SSH key，粘贴 <code>id_rsa.pub</code> 里面的全部内容。</li></ul><p><img src="https://tao7app.files.wordpress.com/2022/12/screenshot_2020_0801_151404755358037895170688.png" alt="添加 SSH key 页面"></p><ul><li>查看是否连接成功，输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tao7app.files.wordpress.com/2023/01/165047.png" alt="连接成功页面"></p><ul><li>打开 Hexo 根目录下的配置文件 <code>_config.yml</code> ，修改添加如下内容：</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>     <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span>      <span class="token key atrule">github</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>xxx/xxx.github.io.git <span class="token comment"># `xxx` 是 github 配置的仓库名</span>    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Hexo-部署到-GitHub-Pages"><a class="header-anchor" href="#Hexo-部署到-GitHub-Pages">☃</a>Hexo 部署到 GitHub Pages</h2><hr><ul><li>在部署到 GitHub 之前，首先安装 <code>hexo-deployer-git</code> 的 Hexo 插件。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>部署到 GitHub 。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述操作完成后，打开浏览器访问设置的网络地址 <strong><a href="https://xxx.github.io/">https://xxx.github.io/</a></strong> （xxx 是 github 账号昵称），就可以看见和本地网络地址 <strong><a href="http://localhost:4000">http://localhost:4000</a></strong> 一样的 Hexo 博客页面。</p><hr><h1 id="Hexo-部署到-Gitee"><a class="header-anchor" href="#Hexo-部署到-Gitee">☃</a>Hexo 部署到 Gitee</h1><hr><hr><h2 id="在-Gitee-官网上创建个人仓库"><a class="header-anchor" href="#在-Gitee-官网上创建个人仓库">☃</a>在 Gitee 官网上创建个人仓库</h2><hr><p>打开<a href="https://gitee.com/">码云官网</a>，注册登陆，创建项目，点击右上角加号，新建仓库。</p><p><img src="https://tao7app.files.wordpress.com/2023/01/151224.png" alt="创建仓库页面"></p><p>开启 Gitee Pages 服务。</p><p><img src="https://tao7app.files.wordpress.com/2023/01/3333.png" alt=""></p><hr><p><img src="https://tao7app.files.wordpress.com/2022/12/img_20200803_0937147843036425501178044.jpg" alt="Gitee Pages 服务页面"></p><p>点击启动后出现的蓝色链接就是生成的博客网址地址，每次部署都要进入 Gitee Pages 服务页面点击启动按钮才能更新更改。</p><p><img src="https://tao7app.files.wordpress.com/2022/12/screenshot_2020_0802_2314342325756989210353055.png" alt="开启服务成功页面"></p><hr><h2 id="初始化-Git-设置"><a class="header-anchor" href="#初始化-Git-设置">☃</a>初始化 Git 设置</h2><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的 gitee 账号名"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"你的 gitee 邮箱号"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="查看设置是否正确-v2"><a class="header-anchor" href="#查看设置是否正确-v2">☃</a>查看设置是否正确</h2><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="生成-SSH-公钥添加到-Gitee"><a class="header-anchor" href="#生成-SSH-公钥添加到-Gitee">☃</a>生成 SSH 公钥添加到 Gitee</h2><hr><ul><li>创建 SSH key ，默认回车，输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"你的邮箱号"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tao7app.files.wordpress.com/2022/12/img_20200802_1139583858709568397913356.jpg" alt="生成 SSH key 页面"></p><ul><li>查看 SSH key ， 输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tao7app.files.wordpress.com/2022/12/img_20200803_0950183625923031218189922.jpg" alt="SSH key 内容"></p><ul><li>复制 <code>id_rsa.pub</code> 里面的全部内容，在 gitee 的安全设置中，找到 <code>SSH 公钥</code> 的设置选项，添加 SSH key ，粘贴 <code>id_rsa.pub</code> 里面的全部内容。</li></ul><p><img src="https://tao7app.files.wordpress.com/2022/12/screenshot_2020_0802_2316484808107369418949929.png" alt="添加 SSH key 页面"></p><ul><li>查看是否连接成功，输入如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tao7app.files.wordpress.com/2023/01/13165131.png" alt="连接成功页面"></p><ul><li>打开 Hexo 根目录下的 <code>_config.yml</code> 配置文件，修改添加如下内容：</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 账号名和仓库名不一致时添加如下配置形式，否则不用添加</span><span class="token key atrule">url</span><span class="token punctuation">:</span> Gitee Pages 服务网站地址： https<span class="token punctuation">:</span>//空间名.gitee.io/仓库名<span class="token key atrule">root</span><span class="token punctuation">:</span> /仓库名/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> git      <span class="token key atrule">repo</span><span class="token punctuation">:</span>        <span class="token key atrule">gitee</span><span class="token punctuation">:</span> git@gitee.com<span class="token punctuation">:</span>xxx/xxx.git <span class="token comment"># `xxx` 是 gitee 的账号名</span>     <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>GitHub 和 Gitee 双部署的 Hexo 根目录下的配置文件 <code>_config.yml</code> 配置形式：</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>     <span class="token key atrule">type</span><span class="token punctuation">:</span> git     <span class="token key atrule">repo</span><span class="token punctuation">:</span>       <span class="token key atrule">github</span><span class="token punctuation">:</span> git@github.com/cqupthao/cqupthao.github.io.git  <span class="token comment"># cqupthao 为账号名</span>       <span class="token key atrule">gitee</span><span class="token punctuation">:</span> git@gitee.com/cqupthao/cqupthao.git  <span class="token comment"># cqupthao 为账号名</span>     <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Hexo-部署到-Gitee-Pages"><a class="header-anchor" href="#Hexo-部署到-Gitee-Pages">☃</a>Hexo 部署到 Gitee Pages</h2><hr><ul><li>在部署到 Gitee 之前，首先安装 <code>hexo-deployer-git</code> 的 Hexo 插件。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>部署到 Gitee 。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述操作完成后，打开浏览器访问设置的网络地址 <strong><a href="https://xxx.gitee.io/">https://xxx.gitee.io/</a></strong> （<code>xxx</code> 是 gitee 账户号），就可以看见和本地网址地址 <strong><a href="http://localhost:4000">http://localhost:4000</a></strong> 一样的 Hexo 博客页面。</p><hr><ul><li>参考<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a></li></ul><hr><h1 id="Matery-主题安装及优化"><a class="header-anchor" href="#Matery-主题安装及优化">☃</a>Matery 主题安装及优化</h1><hr><ul><li><p>Matery 主题安装参考 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">Matery 官网教程</a>。</p></li><li><p>Matery 优化参考 <a href="https://blog.17lai.site/posts/40300608/">基于 Hexo 的 Matery 主题搭建博客并深度优化一站式完全教程</a>。</p></li></ul><hr><h1 id="Hexo-插件的安装"><a class="header-anchor" href="#Hexo-插件的安装">☃</a>Hexo 插件的安装</h1><hr><hr><h2 id="代码高亮"><a class="header-anchor" href="#代码高亮">☃</a>代码高亮</h2><hr><p>从 Hexo5.0 版本开始自带了 prismjs 代码语法高亮的支持，如果博客安装过 <code>hexo-prism-plugin</code> 的插件，须执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>修改 Hexo 根目录下 <code>_config.yml</code> 文件中 highlight.enable 的值为 false ，并将 prismjs.enable 的值设置为 true ，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 prismjs 主题是 Tomorrow Night ，如果想定制自己的主题，可前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a>  定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 <code>css</code> 主题文件取名为 <code>prism.css</code>，替换掉 Matery 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件。</p><hr><h2 id="搜索"><a class="header-anchor" href="#搜索">☃</a>搜索</h2><hr><p>使用 <code>hexo-generator-search</code> 的 Hexo 插件来实现内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="中文链接转拼音"><a class="header-anchor" href="#中文链接转拼音">☃</a>中文链接转拼音</h2><hr><p>使用 <code>hexo-permalink-pinyin</code> 的 Hexo 插件使在生成文章时生成中文拼音的永久链接，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，就可以生成拼音链接。</p><hr><h2 id="文章生成永久链接"><a class="header-anchor" href="#文章生成永久链接">☃</a>文章生成永久链接</h2><hr><p>使用 <code>hexo-abbrlink</code> 的 Hexo 插件来实现文章生成永久链接，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>     <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16 <span class="token comment">#算法：</span>    <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex <span class="token comment">#输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将 <code>_config.yml</code> 文件中的 permalink 的值修改为如下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>abbrlink.html  <span class="token comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，就可以生成永久链接。生成完后，原 md 文件的 Front-matter 内会增加 abbrlink 字段，值为生成的 ID 。</p><hr><h2 id="外链跳转"><a class="header-anchor" href="#外链跳转">☃</a>外链跳转</h2><hr><p>使用 <code>hexo-external-link</code> 的 Hexo 插件来实现外链跳转，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-external-link <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">hexo_external_link</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">enable_base64_encode</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">url_param_name</span><span class="token punctuation">:</span> <span class="token string">'u'</span>  <span class="token key atrule">html_file_name</span><span class="token punctuation">:</span> <span class="token string">'go.html'</span>  <span class="token key atrule">target_blank</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">link_rel</span><span class="token punctuation">:</span> <span class="token string">'external nofollow noopener noreferrer'</span>  <span class="token key atrule">domain</span><span class="token punctuation">:</span> <span class="token string">'your_domain'</span> <span class="token comment"># 如果开启了防盗链，填写你的域名</span>  <span class="token key atrule">safety_chain</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，就可以实现外链跳转。</p><hr><h2 id="文章字数统计"><a class="header-anchor" href="#文章字数统计">☃</a>文章字数统计</h2><hr><p>使用 <code>hexo-wordcount</code> 的 Hexo 插件来实现在文章中统计显示文章字数、阅读时长信息，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-wordcount <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Matery 主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true </span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，就可以实现文章字数统计。</p><hr><h2 id="添加-Emoji-表情支持"><a class="header-anchor" href="#添加-Emoji-表情支持">☃</a>添加 Emoji 表情支持</h2><hr><p>使用 <code>hexo-filter-github-emojis</code> 的 Hexo 插件来支持 emoji 表情的生成，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中用 emoji 语法写表情。</p><hr><h2 id="添加-RSS-订阅支持"><a class="header-anchor" href="#添加-RSS-订阅支持">☃</a>添加 RSS 订阅支持</h2><hr><p>使用 <code>hexo-generator-feed</code> 的 Hexo 插件来做 RSS，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，在 <code>public</code> 文件夹中看到 <code>atom.xml</code> 文件，说明已安装成功。</p><hr><h2 id="图片懒加载"><a class="header-anchor" href="#图片懒加载">☃</a>图片懒加载</h2><hr><p>使用 <code>hexo-lazyload-image</code> 的 Hexo 插件来实现图片懒加载，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 是否只对文章的图片做懒加载</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> <span class="token comment"># eg ./images/loading.gif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，一般情况下懒加载会和 gallery 插件会发生冲突，结果可能就是点开图片，左右翻都是 loading image ，解决方法是修改 <code>/themes/matery/source/js</code> 中的 <code>matery.js</code> 文件在第 108 行加上如下内容：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>做完这步之后，首页的 logo 点击会直接打开 logo 图，而不是跳到首页，解决方法是打开  <code>/themes/matery/layout/_partial/header.ejs</code> 文件，在 <code>img</code> 和 <code>span</code> 的两个头加个 <code>div</code> 。</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div class="brand-logo"&gt;    &lt;a href="&lt;%- url_for() %&gt;" class="waves-effect waves-light"&gt;        &lt;div&gt;            &lt;% if (theme.logo !== undefined &amp;&amp; theme.logo.length &gt; 0) { %&gt;            &lt;img src="&lt;%= theme.logo %&gt;" class="logo-img" alt="LOGO"&gt;            &lt;% } %&gt;            &lt;span class="logo-span"&gt;&lt;%- config.title %&gt;&lt;/span&gt;        &lt;/div&gt;    &lt;/a&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，就可以实现图片懒加载。</p><hr><h2 id="折叠功能"><a class="header-anchor" href="#折叠功能">☃</a>折叠功能</h2><hr><p>使用 <code>hexo-sliding-spoiler</code> 的 Hexo 插件来实现折叠功能，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-sliding-spoiler <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">plugin</span><span class="token punctuation">:</span><span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>sliding<span class="token punctuation">-</span>spoiler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，就可以实现折叠功能。</p><hr><h2 id="代码压缩"><a class="header-anchor" href="#代码压缩">☃</a>代码压缩</h2><hr><p>使用 <code>hexo-neat</code> 的 Hexo 插件来实现代码压缩，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-neat <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#hexo-neat 优化提速插件（去掉 HTML、css、js 的 blank字符）</span><span class="token key atrule">neat_enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">neat_html</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.md'</span><span class="token key atrule">neat_css</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.min.css'</span><span class="token key atrule">neat_js</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">mangle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">output</span><span class="token punctuation">:</span>  <span class="token key atrule">compress</span><span class="token punctuation">:</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.min.js'</span>    <span class="token punctuation">-</span> <span class="token string">'**/**/instantpage.js'</span>    <span class="token punctuation">-</span> <span class="token string">'**/matery.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，就可以实现代码压缩了。</p><hr><p>Hexo 插件安装参考 <a href="https://hexo.io/plugins">Hexo 官网</a></p><hr><h1 id="Hexo-添加-Valine-评论系统"><a class="header-anchor" href="#Hexo-添加-Valine-评论系统">☃</a>Hexo 添加 Valine 评论系统</h1><hr><hr><h2 id="Valine-简介"><a class="header-anchor" href="#Valine-简介">☃</a>Valine 简介</h2><hr><p><a href="https://valine.js.org/">valine</a>  诞生于 2017 年 8 月 7 日，是一款基于  <a href="https://www.leancloud.cn/">LeanCloud</a>  的快速、简洁且高效的无后端评论系统。理论上支持但不限于静态博客，目前已有 Hexo 、Jekyll 、Typecho 、Hugo 、Ghost 等博客程序在使用  <a href="https://valine.js.org/">valine</a> 。</p><p>valine 具有快速安全，Emoji 😉，无后端实现，MarkDown 全语法支持，轻量易用，文章阅读量统计等优质特性。</p><hr><h2 id="Valine-的配置"><a class="header-anchor" href="#Valine-的配置">☃</a>Valine 的配置</h2><hr><ul><li>在 <a href="https://console.leancloud.cn/">LeanCloud 官网</a>注册登录，创建一个应用，然后进入应用，点击设置，找到应用凭证，复制 AppID 和 AppKey 添加到 Matery 主题的 <code>config.yml</code> 配置文件中的对应位置。</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/02017.png" alt="AppID 和 AppKey"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey 。</span><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">appId</span><span class="token punctuation">:</span>  <span class="token comment"># 将应用 key 的 AppID 设置在这里</span>  <span class="token key atrule">appKey</span><span class="token punctuation">:</span> <span class="token comment"># 将应用 key 的 AppKey 设置在这里</span>  <span class="token key atrule">serverURLs</span><span class="token punctuation">:</span>  <span class="token comment"># https://你的api</span>  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 邮箱通知</span>  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 验证码 默认为 false</span>  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否允许游客评论</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">'mm'</span> <span class="token comment"># 头像风格，默认为 mm ，可进入网址: mm/identicon/monsterid/wavatar/retro/hide</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> <span class="token string">'just go go'</span> <span class="token comment"># Comment Box placeholder</span>  <span class="token key atrule">background</span><span class="token punctuation">:</span> /medias/comment_bg.png  <span class="token key atrule">coolpushkey</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>升级 valine 版本。</li></ul><p>进入 <a href="https://unpkg.com/valine/dist/">valine 官网</a>， 选择 valine 版本后点击 <code>Valine.min.js</code> ，点击 View Raw 后复制全部内容，替换掉 Matery 主题下的 <code>/source/libs/valine/Valine.min.js</code> 文件全部内容。</p><p><img src="https://tao7app.files.wordpress.com/2023/01/135.png" alt="Valine.min.js 内容页面"></p><p>修改 Matery 主题目录下的 <code>_comfig.yml</code> 配置文件如下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">appId</span><span class="token punctuation">:</span> iTxfqh5e9IaRfiiVOTbIWoKa<span class="token punctuation">-</span>XXXXXX  <span class="token key atrule">appKey</span><span class="token punctuation">:</span> C5s5xGFErD1EtXXXXXXXX  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 是否启用防垃圾验证</span>  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 是否开启邮件提醒(https://valine.js.org/notify.html)</span>  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> monsterid  <span class="token comment"># 头像样式(https://valine.js.org/avatar.html) </span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> <span class="token string">'ヾﾉ≧∀≦)o来啊，快活啊!'</span> <span class="token comment"># Comment Box placeholder</span>  <span class="token key atrule">background</span><span class="token punctuation">:</span> /medias/comment_bg.png <span class="token comment">#背景图</span>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">enableQQ</span><span class="token punctuation">:</span> <span class="token number">2733443175</span>  <span class="token key atrule">recordIP</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">requiredFields</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> nick    <span class="token punctuation">-</span> mail  <span class="token key atrule">guest_info</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> nick    <span class="token punctuation">-</span> mail    <span class="token punctuation">-</span> link  <span class="token key atrule">master</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> 123abc508165c8eba9a77f872xxxx046  <span class="token comment"># MD5 加密后的博主邮箱</span>  <span class="token key atrule">metaPlaceholder</span><span class="token punctuation">:</span>  <span class="token comment"># 输入框的背景文字</span>    <span class="token key atrule">nick</span><span class="token punctuation">:</span> 昵称 / QQ 号（必填）    <span class="token key atrule">mail</span><span class="token punctuation">:</span> 邮箱（用于获取通知信息）    <span class="token key atrule">link</span><span class="token punctuation">:</span>   <span class="token key atrule">lang</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN  <span class="token key atrule">tagMeta</span><span class="token punctuation">:</span> <span class="token comment"># The String Array of Words to show Flag ，[Just Only xCss Style modle]</span>    <span class="token punctuation">-</span> 博主    <span class="token punctuation">-</span> 小伙伴    <span class="token punctuation">-</span> 访客<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>valine 配置参数信息参考 <a href="https://valine.js.org/">valine 官方文档</a></li></ul><hr><ul><li>管理评论。</li></ul><p>点击 <code>存储 -&gt; 结构化数据</code> ，选择创建 Class ，名称  <code>Comment</code> ，其它保持默认，以后 Hexo 博客的评论就可在这个 Class 内查看，删除等。</p><p><img src="https://tao7app.files.wordpress.com/2023/01/40522.png" alt="创建 Comment"></p><ul><li>文章阅读量统计。</li></ul><p>点击 <code>存储 -&gt; 结构化数据</code> ，选择创建 Class ，名称 <code>Counter</code> ，其它保持默认，以后就可在这个 Class 内查看。</p><p><img src="https://tao7app.files.wordpress.com/2023/01/40502.png" alt="创建 Counter"></p><hr><h2 id="增加点击跳转评论按钮"><a class="header-anchor" href="#增加点击跳转评论按钮">☃</a>增加点击跳转评论按钮</h2><hr><p>在 Matery 主题目录 <code>/layout/_partial/</code>  下新建 <code>back-comment.ejs</code> 文件 , 复制粘贴如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 直达评论 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"to_comment"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"comment-scroll"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn-floating btn-large waves-effect waves-light"</span> href<span class="token operator">=</span><span class="token string">"#vcomments"</span> title<span class="token operator">=</span><span class="token string">"直达评论"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fas fa-comments"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Matery 主题目录 <code>/layout/_partial/</code>  下的 <code>valine.ejs</code> 文末添加一条如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/back-comment.ejs'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只有 valine 存在的页面才显示直达评论，为了防止首页其它地方也出现按钮，在 Matery 主题目录 <code>/source/css/</code> 下的 <code>matery.css</code> 文件添加如下内容：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*直达评论按钮样式*/</span><span class="token selector">.comment-scroll</span> <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 135px<span class="token punctuation">;</span> # bottom ：135px 是距离底部的高度    <span class="token property">padding-top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 998<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.comment-scroll .btn-floating</span> <span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom right<span class="token punctuation">,</span> #FF9999 0%<span class="token punctuation">,</span> #ff6666 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.comment-scroll .btn-floating i</span> <span class="token punctuation">{</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.8rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="实现-Valine-评论系统通知功能"><a class="header-anchor" href="#实现-Valine-评论系统通知功能">☃</a>实现 Valine 评论系统通知功能</h1><hr><hr><h2 id="简介"><a class="header-anchor" href="#简介">☃</a>简介</h2><hr><p>Valine-Admin 项目是一个对  <a href="https://valine.js.org/">valine</a>  评论系统的拓展应用，可以增强 valine 的邮件通知功能。基于 LeanCloud 的云引擎与云函数，主要实现评论邮件通知、评论管理、自定义邮件通知模板等功能，还可以提供邮件 <code>通知站长</code> 和 <code>@通知</code> 的功能。</p><hr><h2 id="Valine-Admin-的配置"><a class="header-anchor" href="#Valine-Admin-的配置">☃</a>Valine-Admin 的配置</h2><ul><li><p>确保 valine 的基础功能是是否正常，参考 <a href="https://valine.js.org/">valine 官方文档</a>。</p></li><li><p>进入 <a href="https://leancloud.cn/dashboard/applist.html#/apps">LeanCloud</a>  对应的 valine 应用中。</p></li><li><p>点击 <code>云引擎 -&gt; 部署</code> ，选择 <code>Git 源码部署</code> ，填写仓库地址 <code>https://github.com/HCLonely/Valine-Admin</code> ，点击保存，分支或版本号输入 <code>master</code> ，下载最新依赖（可选），点击部署。</p></li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/0547.png" alt="部署页面"></p><ul><li>设置 <code>自定义环境变量</code> ，需要设置云引擎的环境变量以提供必要的信息，变量参数参考下面的 <code>配置项表</code> ：</li></ul><table><thead><tr><th style="text-align:left">变量</th><th style="text-align:left">示例</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">SITE_NAME</td><td style="text-align:left">blog</td><td style="text-align:left">[必填] 网站名称</td></tr><tr><td style="text-align:left">SITE_URL</td><td style="text-align:left"><a href="https://xxx.github.io">https://xxx.github.io</a></td><td style="text-align:left">[必填] 网站地址，最后不要加 /</td></tr><tr><td style="text-align:left">SMTP_SERVICE</td><td style="text-align:left">QQ</td><td style="text-align:left">[必填] 邮件服务提供商，支持 QQ、163、126、Gmail 以及更多</td></tr><tr><td style="text-align:left">SMTP_USER</td><td style="text-align:left"><a href="mailto:xxxx@qq.com">xxxx@qq.com</a></td><td style="text-align:left">[必填] SMTP登录用户，一般为邮箱地址</td></tr><tr><td style="text-align:left">SMTP_PASS</td><td style="text-align:left">xxxx</td><td style="text-align:left">[必填] SMTP登录密码，QQ 授权码,<a href=""></a></td></tr><tr><td style="text-align:left">SENDER_NAME</td><td style="text-align:left">Valine 评论提醒</td><td style="text-align:left">[可选] 通知模板</td></tr><tr><td style="text-align:left">ADMIN_URL</td><td style="text-align:left"><a href="https://xxx.leanapp.cn/">https://xxx.leanapp.cn/</a></td><td style="text-align:left">[建议] Web 主机二级域名，用于自动唤醒</td></tr><tr><td style="text-align:left">TO_EMAIL</td><td style="text-align:left"><a href="mailto:xxxxx@gmail.com">xxxxx@gmail.com</a></td><td style="text-align:left">[可选] 指定站长收信邮箱，默认值为 SITE_USER ，用于 SMTP 发件人与站长收件人不一致的情况下使用</td></tr><tr><td style="text-align:left">TEMPLATE_NAME</td><td style="text-align:left">rainbow</td><td style="text-align:left">[可选] 通知邮件的模板（default 和 rainbow），参考高级功能</td></tr></tbody></table><hr><p><img src="https://tao7app.files.wordpress.com/2023/01/706.png" alt="自定义环境变量页面"></p><ul><li>设置后台管理登录信息，点击 <code>存储 -&gt; 结构化数据</code> ，选择 <code>_User -&gt; 添加行</code> ，只需要填写 <code>password</code> 、<code>username</code> 、<code>email</code> 这三个字段即可, 使用 email 作为账号登陆、password 作为账号密码、username 任意即可。（为了安全考虑，此 email 必须为配置中的 <code>SMTP_USER</code> 或 <code>TO_EMAIL</code> ，否则不允许登录）</li></ul><p><img src="https://tao7app.files.wordpress.com/2023/01/35744.png" alt="valine 评论通知效果"></p><hr><ul><li>参考 <a href="https://blog.17lai.site/posts/9b056c86/">基于 Hexo 的 Matery 主题搭建博客个性定制篇</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> Matery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> GitHub </tag>
            
            <tag> Valine </tag>
            
            <tag> Hexo </tag>
            
            <tag> Gitee </tag>
            
            <tag> Matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="模板机制"><a class="header-anchor" href="#模板机制">☃</a>模板机制</h1><hr><p>模板机制</p><p>模板可以理解为事先定义好的 HTML 文档文件，模板渲染的作用机制可以简单理解为文本替换操作–使用相应的数据去替换 HTML 文档中事先准备好的标记。模板用于显示和数据分离（前后端分离），模板技术，本质是模板引擎利用模板文件和数据生成 HTML 文档。</p><h2 id="Go-语言中的模板引擎"><a class="header-anchor" href="#Go-语言中的模板引擎">☃</a>Go 语言中的模板引擎</h2><p>Go语言内置了文本模板引擎 <code>text/template</code> 和用于 HTML 文档的 <code>html/template</code> ，它们的作用机制可以简单归纳如下：</p><ol><li>模板文件通常定义为 <code>.tmpl</code> 和 <code>.tpl</code> 为后缀（也可以使用其他的后缀），必须使用 <code>UTF8</code> 编码。</li><li>模板文件中使用 <code>{{` 和 `}}</code> 包裹和标识需要传入的数据。</li><li>传给模板这样的数据就可以通过点号（<code>.</code>）来访问，如果数据是复杂类型的数据，可以通过 <code>{{ .FieldName }}</code> 来访问它的字段。</li><li>除 <code>{{` 和 `}}</code> 包裹的内容外，其他内容均不做修改原样输出。</li></ol><hr><h2 id="Go-语言中模板引擎的使用"><a class="header-anchor" href="#Go-语言中模板引擎的使用">☃</a>Go 语言中模板引擎的使用</h2><hr><p>Go 语言中模板引擎的使用可以分为三个阶段：定义模板文件、解析模板文件和模板渲染。</p><ul><li>定义模板文件。</li></ul><p>定义模板文件时需要按照相关语法规则去编写。</p><ul><li>解析模板文件。</li></ul><p>定义好模板文件之后，可以使用下面的常用方法去解析模板文件，得到模板对象：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span>  <span class="token function">New</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span>  <span class="token operator">*</span>Template<span class="token comment">//创建指定模板名称的模板对象</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Template<span class="token punctuation">)</span> <span class="token function">Parse</span><span class="token punctuation">(</span>src <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Template<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token comment">//解析模板内容</span><span class="token keyword">func</span> <span class="token function">ParseFiles</span><span class="token punctuation">(</span>filenames <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Template<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token comment">//解析模板文件</span><span class="token keyword">func</span> <span class="token function">ParseGlob</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Template<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token comment">//正则匹配解析文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然也可以使用 <code>func New(name string) *Template</code> 函数创建一个名为 <code>name</code> 的模板，然后对其调用上面的方法去解析模板字符串或模板文件。</p><ul><li>模板渲染。</li></ul><p>渲染模板简单来说就是使用数据去填充模板，当然实际上可能会复杂很多。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Template<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>wr io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> data <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Template<span class="token punctuation">)</span> <span class="token function">ExecuteTemplate</span><span class="token punctuation">(</span>wr io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> data <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 Go 语言中，使用 <code>template</code> 包来进行模板处理，使用类似 Parse、ParseFile、Execute  等方法从文件或者字符串加载模板，然后执行模板的 merge 操作。请看下面的例子。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>            t <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"some template"</span><span class="token punctuation">)</span> <span class="token comment">//创建一个模板</span>            t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"tmpl/welcome.html"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>  <span class="token comment">//解析模板文件</span>            user <span class="token operator">:=</span> <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取当前用户信息</span>t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> user<span class="token punctuation">)</span>  <span class="token comment">//执行模板的merger操作</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这个例子我们可以看到，Go 语言的模板操作非常简单、方便，和其他语言的模板处理类似，都是先获取数据，然后渲染数据。<br>为了方便演示和测试代码，我们在接下来的例子中采用如下格式的代码。</p><ul><li><p>使用 Parse 代替 ParseFiles ，因为 Parse 可以直接测试一个字符串，而不需要额外的文件。</p></li><li><p>不使用 handler 来写演示代码，而是每个测试有一个 main ，方便测试。</p></li><li><p>使用 os.Stdout 代替 http.ResponseWriter ，因为，os.Stdout 实现了 <code>io.Writer</code> 接口。</p></li></ul><hr><h1 id="模板语法"><a class="header-anchor" href="#模板语法">☃</a>模板语法</h1><hr><h3 id="字段操作"><a class="header-anchor" href="#字段操作">☃</a>字段操作</h3><p>Go 语言的模板通过 <code>{{}}` 来包含需要在渲染时被替换的字段，`{{.}}</code> 表示当前的对象，如果要访问当前对象的字段，通过 <code>{{.FieldName}}</code> ，但是需要注意一点，这个字段必须是导出的（字段首字母必须大写），否则在渲染的时候就会报错，请看下面的这个例子。</p><p>模板中的变量通过 <code>{{.}}</code> 来访问。<code>{{.}}</code> 称为管道和 root 。在模板文件内，<code>{{.}}</code> 代表当前变量，即在非循环体内，<code>{{.}}</code> 就代表传入的那个变量。模板中使用 <code>{{/* comment */}}</code> 来进行注释。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main        <span class="token keyword">import</span> <span class="token punctuation">(</span>            <span class="token string">"html/template"</span>            <span class="token string">"os"</span><span class="token punctuation">)</span>        <span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>            UserName <span class="token builtin">string</span>        <span class="token punctuation">}</span>        <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            t <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"fieldname example"</span><span class="token punctuation">)</span>            t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"hello {{.UserName}}!"</span><span class="token punctuation">)</span>            p <span class="token operator">:=</span> Person<span class="token punctuation">{</span>UserName<span class="token punctuation">:</span> <span class="token string">"Astaxie"</span><span class="token punctuation">}</span>            t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> p<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码可以正确输出 hello Astaxie ，但是如果稍微修改一下代码，在模板中含有未导出的字段，就会报错。但如果调用了一个不存在的字段，是不会报错的，而是输出为空。<br>如果模板中输出 <code>{{.}}</code> ，这个一般用于字符串对象，默认会调用 <code>fmt</code> 包输出字符串的内容。</p><p>模板语法都包含在 <code>{{` 和 `}}</code> 中间，其中<code>{{.}}</code> 中的点表示当前对象。</p><p>当传入一个结构体对象时，可以根据 <code>.</code> 来访问结构体的对应字段。例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"html/template"</span> <span class="token string">"net/http"</span> <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token comment">//定义用户结构体</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span> Name <span class="token builtin">string</span> Gender <span class="token builtin">string</span> Age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 获取项目的绝对路径</span> wd<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"get wd failed, err:%v \n"</span><span class="token punctuation">,</span> wd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">}</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"wd:"</span><span class="token punctuation">,</span> wd <span class="token operator">+</span> <span class="token string">"\\lesson05\\hello.tmpl"</span><span class="token punctuation">)</span> <span class="token comment">// 解析指定文件生成模板对象</span> tmpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span> wd <span class="token operator">+</span> <span class="token string">"\\lesson05\\hello.tmpl"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"create template failed, err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">}</span> u1 <span class="token operator">:=</span> User<span class="token punctuation">{</span> Name<span class="token punctuation">:</span> <span class="token string">"小王子"</span><span class="token punctuation">,</span> Gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token comment">// 利用给定数据渲染模板，并将结果写入w</span> tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> u1<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> sayHello<span class="token punctuation">)</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":9090"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"HTTP server failed,err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板文件 <code>hello.tmpl</code> 内容如下：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;姓名: {{.Name}}&lt;/h1&gt;&lt;h1&gt;性别: {{.Gender}}&lt;/h1&gt;&lt;h1&gt;年龄: {{.Age}}&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在浏览器输入如下网址</p><p><a href="http://localhost:9090/sayHello">http://localhost:9090/sayHello</a></p><p>能够渲染出结构体中的值。</p><p>当传入的变量是 map 时，也可以在模板文件中通过 <code>.</code> 根据key来取值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 采用一个map</span>m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"小王子"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"Gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">// 利用给定数据渲染模板，并将结果写入w</span>tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> m1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们想把 map 和结构体都传递到前端，那么就需要在定义一个大的 map 来进行存储</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 采用结构体</span>u1 <span class="token operator">:=</span> User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"小王子"</span><span class="token punctuation">,</span>Gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>Age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">// 采用一个map</span>m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"小王子"</span><span class="token punctuation">,</span><span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"Gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>m2 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"map"</span><span class="token punctuation">:</span> m1<span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">:</span> u1<span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-HTML<!DOCTYPE" data-language="HTML<!DOCTYPE"><div class="caption"><span>html&gt;</span></div><code class="language-HTML<!DOCTYPE">&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;模板使用示例&lt;/title&gt;&lt;/head&gt;&lt;body&gt;   &lt;p&gt;加油，小伙伴， {{ . }} &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"html/template"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">helloHandleFunc</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 1. 解析模板</span>t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./template_example.tmpl"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"template parsefile failed, err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// 2.渲染模板</span>name <span class="token operator">:=</span> <span class="token string">"我爱Go语言"</span>t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> helloHandleFunc<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8086"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板语法都包含在<code>{{` 和 `}}</code> 中间</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> UserInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>Name <span class="token builtin">string</span>Gender <span class="token builtin">string</span>Age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>tmpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./hello.html"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmp<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"create template failed, err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>user <span class="token operator">:=</span> UserInfo <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>Gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>Age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span><span class="token punctuation">}</span>tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;&lt;body&gt;   &lt;p&gt;Hello {{.Name}}&lt;/p&gt;   &lt;p&gt;性别：{{.Gender}}&lt;/p&gt;   &lt;p&gt;年龄：{{.Age}}&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注释"><a class="header-anchor" href="#注释">☃</a>注释</h3><p><code>{{/* a comment */}}</code> 注释，执行时会忽略。可以多行。注释不能嵌套，并且必须紧贴分界符始止。</p><h3 id="输出嵌套字段内容"><a class="header-anchor" href="#输出嵌套字段内容">☃</a>输出嵌套字段内容</h3><p>上面的例子展示了如何针对一个对象的字段输出，那么如果字段里面还有对象，如何来循环输出这些内容呢？可以使用如下方式进行数据的输出：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span>with …<span class="token punctuation">}</span><span class="token punctuation">}</span>…<span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">range</span> …<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Go的模板语法中使用 <code>range</code> ,关键字进行遍历，有以下两种写法，其中 <code>pipeline</code> 的值必须是数组、切片、字典或者通道。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">range</span> pipeline<span class="token punctuation">}</span><span class="token punctuation">}</span> T1 <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>如果pipeline的值其长度为<span class="token number">0</span>，不会有任何输出<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">range</span> pipeline<span class="token punctuation">}</span><span class="token punctuation">}</span> T1 <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">else</span><span class="token punctuation">}</span><span class="token punctuation">}</span> T0 <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>如果pipeline的值其长度为<span class="token number">0</span>，则会执行T0。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="with"><a class="header-anchor" href="#with">☃</a>with</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span>with pipeline<span class="token punctuation">}</span><span class="token punctuation">}</span> T1 <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 如果pipeline为empty不产生输出，否则将dot设为pipeline的值并执行T1。不修改外面的dot。</span><span class="token punctuation">{</span><span class="token punctuation">{</span>with pipeline<span class="token punctuation">}</span><span class="token punctuation">}</span> T1 <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">else</span><span class="token punctuation">}</span><span class="token punctuation">}</span> T0 <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 如果 pipeline 为empty，不改变dot并执行T0，否则dot设为pipeline的值并执行T1。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>{{range}}</code>  和 Go 语言语法里面的 range类似，循环操作数据</p></li><li><p><code>{{with}}</code> 操作是指当前对象的值，类似上下文的概念<br>请看下面的例子了解如何详细使用。</p></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main        <span class="token keyword">import</span> <span class="token punctuation">(</span>            <span class="token string">"html/template"</span>            <span class="token string">"os"</span>        <span class="token punctuation">)</span>        <span class="token keyword">type</span> Friend <span class="token keyword">struct</span> <span class="token punctuation">{</span>            Fname <span class="token builtin">string</span>        <span class="token punctuation">}</span>        <span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>            UserName <span class="token builtin">string</span>            Emails   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>            Friends  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Friend        <span class="token punctuation">}</span>        <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            f1 <span class="token operator">:=</span> Friend<span class="token punctuation">{</span>Fname<span class="token punctuation">:</span> <span class="token string">"minux.ma"</span><span class="token punctuation">}</span>            f2 <span class="token operator">:=</span> Friend<span class="token punctuation">{</span>Fname<span class="token punctuation">:</span> <span class="token string">"xushiwei"</span><span class="token punctuation">}</span>            t <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"fieldname example"</span><span class="token punctuation">)</span>            t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">`hello {{.UserName}}!                    {{range .Emails}}                    an email {{.}}                    {{end}}                    {{with .Friends}}                    {{range .}}                    my friend name is {{.Fname}}                    {{end}}                    {{end}}                    `</span><span class="token punctuation">)</span>            p <span class="token operator">:=</span> Person<span class="token punctuation">{</span>UserName<span class="token punctuation">:</span> <span class="token string">"Astaxie"</span><span class="token punctuation">,</span>                Emails<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"astaxie@beego.me"</span><span class="token punctuation">,</span> <span class="token string">"astaxie@gmail.com"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                Friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Friend<span class="token punctuation">{</span><span class="token operator">&amp;</span>f1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f2<span class="token punctuation">}</span><span class="token punctuation">}</span>            t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> p<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件判断"><a class="header-anchor" href="#条件判断">☃</a>条件判断</h3><p>Go模板语法中的条件判断有以下几种:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> pipeline<span class="token punctuation">}</span><span class="token punctuation">}</span> T1 <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> pipeline<span class="token punctuation">}</span><span class="token punctuation">}</span> T1 <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">else</span><span class="token punctuation">}</span><span class="token punctuation">}</span> T0 <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> pipeline<span class="token punctuation">}</span><span class="token punctuation">}</span> T1 <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">else</span> <span class="token keyword">if</span> pipeline<span class="token punctuation">}</span><span class="token punctuation">}</span> T0 <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 Go 语言模板里，进行条件判断和 Go 语言的 if-else 语法类似的方式来处理，如果 pipeline 为空，那么 if 就认为是 false ，下面的例子展示了如何使用 if-else 语法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main        <span class="token keyword">import</span> <span class="token punctuation">(</span>            <span class="token string">"os"</span>            <span class="token string">"text/template"</span>        <span class="token punctuation">)</span>        <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tEmpty <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"template test"</span><span class="token punctuation">)</span>            tEmpty <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>tEmpty<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>"空 pipeline <span class="token keyword">if</span> demo<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token string">``</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    不会输出<span class="token punctuation">.</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>\n"<span class="token punctuation">)</span><span class="token punctuation">)</span>            tEmpty<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>            tWithValue <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"template test"</span><span class="token punctuation">)</span>            tWithValue<span class="token operator">=</span>template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>tWithValue<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>"不为空的 pipeline <span class="token keyword">if</span> demo<span class="token punctuation">:</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token string">`anything`</span><span class="token punctuation">}</span><span class="token punctuation">}</span> 我有内容，我会输出<span class="token punctuation">.</span>     <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>\n"<span class="token punctuation">)</span><span class="token punctuation">)</span>            tWithValue<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>            tIfElse <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"template test"</span><span class="token punctuation">)</span>            tIfElse <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>tIfElse<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>"<span class="token keyword">if</span><span class="token operator">-</span><span class="token keyword">else</span> demo<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token string">`anything`</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">if</span>部分 <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">else</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span>部分<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>\n"<span class="token punctuation">)</span><span class="token punctuation">)</span>            tIfElse<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：if 里面无法使用条件判断，例如 <code>.Mail=="astaxie@gmail.com"</code> ，这样的判断是不正确的，if 里面只能是 bool 值。</p></blockquote><h3 id="pipelines"><a class="header-anchor" href="#pipelines">☃</a>pipelines</h3><p><code>pipeline</code> 是指产生数据的操作。比如 <code>{{.}}</code> 、<code>{{.Name}}</code> 等。Go 语言的模板语法中支持使用管道符号 <code>|</code> 链接多个命令，用法和 UNIX 下的管道类似：<code>|</code> 前面的命令会将运算结果或返回值传递给后一个命令的最后一个位置。</p><blockquote><p>注意：并不是只有使用了 <code>|</code> 才是 pipeline ，Go 语言的模板语法中，<code>pipeline</code> 的概念是传递数据，只要能产生数据的，都是  <code>pipeline</code>。</p></blockquote><p>Linux Shell 操作类似于 <code>ls | grep “beego”</code> 这样的语法经常使用，过滤当前目录下的文件，显示含有 “beego” 的数据，表达的意思就是前面的输出可以当做后面的输入，最后显示我们想要的数据。Go 语言模板支持 pipe 数据，在 Go 语言里面任何 <code>{{}}` 里的都是 `pipelines` 数据，例如我们上面输出的 E-mail 里面如果还有一些可能引起 XSS 注入，那么我们如何来进行转化呢？</code></p><pre class="line-numbers language-go" data-language="go"><code><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">.</span> <span class="token operator">|</span> html<span class="token punctuation">}</span><span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></code></pre><code>在 E-mail 输出的地方，可以采用如上方式把输出全部转化 HTML 的实体，上面的这种方式和写 UNIX 的方式一模一样，调用其他的函数也是类似的方式。### 变量在模板中声明变量，用来保存传入模板的数据或其他语句生成的结果。具体语法如下：<pre class="line-numbers language-go" data-language="go"><code class="language-go">$obj <span class="token operator">:=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>其中 `$obj` 是变量的名字，在后续的代码中就可以使用该变量了。在模板使用过程中需要定义一些局部变量，在一些操作中申明局部变量，例如        `with range if` 过程中申明局部变量，这个变量的作用域是 `{{end}}</code> 之前，Go 语言通过申明的局部变量格式如下所示。<p></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">$variable <span class="token operator">:=</span> pipeline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请看下面详细的例子:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span>with $x <span class="token operator">:=</span> <span class="token string">"output"</span> <span class="token operator">|</span> printf <span class="token string">"%q"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>$x<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>with $x <span class="token operator">:=</span> <span class="token string">"output"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>printf <span class="token string">"%q"</span> $x<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>with $x <span class="token operator">:=</span> <span class="token string">"output"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>$x <span class="token operator">|</span> printf <span class="token string">"%q"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="移除空格"><a class="header-anchor" href="#移除空格">☃</a>移除空格</h3><p>有时候我们在使用模板语法的时候会不可避免的引入一下空格或者换行符，这样模板最终渲染出来的内容可能就和我们想的不一样，这个时候可以使用 <code>{{-` 语法去除模板内容左侧的所有空白符号， 使用 `-}}</code> 去除模板内容右侧的所有空白符号。</p><p>例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span> <span class="token punctuation">.</span>Name <span class="token operator">-</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：<code>-</code>要紧挨 <code>{{` 和 `}}</code> ，同时与模板值之间需要使用空格分隔。</p></blockquote><h3 id="模板函数"><a class="header-anchor" href="#模板函数">☃</a>模板函数</h3><p>执行模板时，函数从两个函数字典中查找：首先是模板函数字典，然后是全局函数字典。一般不在模板内定义函数，而是使用 Funcs 方法添加函数到模板里。</p><p>预定义的全局函数如下：</p><p>and<br>函数返回它的第一个 empty 参数或者最后一个参数；<br>就是说"and x y"等价于"if x then y else x"；所有参数都会执行；<br>or<br>返回第一个非empty参数或者最后一个参数；<br>亦即"or x y"等价于"if x then x else y"；所有参数都会执行；<br>not<br>返回它的单个参数的布尔值的否定<br>len<br>返回它的参数的整数类型长度<br>index<br>执行结果为第一个参数以剩下的参数为索引/键指向的值；<br>如"index x 1 2 3"返回x[1][2][3]的值；每个被索引的主体必须是数组、切片或者字典。<br>print<br>即fmt.Sprint<br>printf<br>即fmt.Sprintf<br>println<br>即fmt.Sprintln<br>html<br>返回与其参数的文本表示形式等效的转义HTML。<br>这个函数在html/template中不可用。<br>urlquery<br>以适合嵌入到网址查询中的形式返回其参数的文本表示的转义值。<br>这个函数在html/template中不可用。<br>js<br>返回与其参数的文本表示形式等效的转义JavaScript。<br>call<br>执行结果是调用第一个参数的返回值，该参数必须是函数类型，其余参数作为调用该函数的参数；<br>如"call .X.Y 1 2"等价于go语言里的dot.X.Y(1, 2)；<br>其中Y是函数类型的字段或者字典的值，或者其他类似情况；<br>call的第一个参数的执行结果必须是函数类型的值（和预定义函数如print明显不同）；<br>该函数类型值必须有1到2个返回值，如果有2个则后一个必须是error接口类型；<br>如果有2个返回值的方法返回的error非nil，模板执行会中断并返回给调用模板执行者该错误；</p><h3 id="比较函数"><a class="header-anchor" href="#比较函数">☃</a>比较函数</h3><p>布尔函数会将任何类型的零值视为假，其余视为真。</p><p>下面是定义为函数的二元比较运算的集合：</p><p>eq      如果arg1 == arg2则返回真<br>ne      如果arg1 != arg2则返回真<br>lt      如果arg1 &lt; arg2则返回真<br>le      如果arg1 &lt;= arg2则返回真<br>gt      如果arg1 &gt; arg2则返回真<br>ge      如果arg1 &gt;= arg2则返回真</p><p>为了简化多参数相等检测，eq（只有eq）可以接受 2 个或更多个参数，它会将第一个参数和其余参数依次比较，返回下式的结果：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span>eq arg1 arg2 arg3<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比较函数只适用于基本类型（或重定义的基本类型，如”type Celsius float32”）。但是，整数和浮点数不能互相比较。</p><h3 id="自定义函数"><a class="header-anchor" href="#自定义函数">☃</a>自定义函数</h3><p>Go 语言的模板支持自定义函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"html/template"</span> <span class="token string">"net/http"</span> <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token comment">/** * @Description f1函数 * @Param  * @return **/</span><span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 定义模板</span> <span class="token comment">// 解析模板</span> <span class="token comment">// 获取项目的绝对路径</span> wd<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"get wd failed, err:%v \n"</span><span class="token punctuation">,</span> wd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">}</span> <span class="token comment">// 定义一个自定义函数</span> <span class="token comment">// 要么只有一个返回值，要么有两个返回值，第二个返回值必须是error类型</span> kua <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">"年轻又帅气!"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token punctuation">}</span> <span class="token comment">// 创建一个名字为f的模板对象。注意，这个名字一定要和模板的名字对应上</span> tmpl <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"hello.tmpl"</span><span class="token punctuation">)</span> <span class="token comment">// 告诉模板引擎，我现在多了一个自定义的函数kua</span> tmpl<span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">{</span> <span class="token string">"kua"</span><span class="token punctuation">:</span> kua<span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 解析模板</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tmpl<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span> wd <span class="token operator">+</span> <span class="token string">"\\lesson06\\hello.tmpl"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"parse template failed, err:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">}</span> <span class="token comment">// 采用一个map</span> m1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"小王子"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"Gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token comment">// 渲染模板</span> tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> m1<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> f1<span class="token punctuation">)</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":9090"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"HTTP server failed,err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在模板文件 <code>hello.tmpl</code> 中按照如下方式使用我们自定义的 <code>kua</code> 函数了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span>kua <span class="token punctuation">.</span>Name<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后运行的结果</p><p>模板在输出对象的字段值时，采用了 <code>fmt</code> 包把对象转化成字符串。但是有时候我们的需求可能不是这个，例如为了防止垃圾邮件发送者通过采集网页的方式来发送的邮箱信息，希望把 <code>@</code> 替换成 <code>at</code> ，例如：<code>astaxie at beego.me</code> ，如果要实现这样的功能，就需要自定义函数来做这个功能。<br>每一个模板函数都有一个唯一值的名字，然后与一个 Go 语言函数关联，通过如下的方式来关联。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> FuncMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，如果想要的 E-mail 函数的模板函数名是 emailDeal ，它关联的 Go 语言函数名称是 EmailDealWith,n ，那么可以通过下面的方式来注册这个函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">t <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">{</span><span class="token string">"emailDeal"</span><span class="token punctuation">:</span> EmailDealWith<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>EmailDealWith 函数的参数和返回值定义如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">EmailDealWith</span><span class="token punctuation">(</span>args …<span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们来看下面的实现例子</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">        <span class="token keyword">package</span> main        <span class="token keyword">import</span> <span class="token punctuation">(</span>            <span class="token string">"fmt"</span>            <span class="token string">"html/template"</span>            <span class="token string">"os"</span>            <span class="token string">"strings"</span>        <span class="token punctuation">)</span>        <span class="token keyword">type</span> Friend <span class="token keyword">struct</span> <span class="token punctuation">{</span>            Fname <span class="token builtin">string</span>        <span class="token punctuation">}</span>        <span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>            UserName <span class="token builtin">string</span>            Emails   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>Friends  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Friend        <span class="token punctuation">}</span>        <span class="token keyword">func</span> <span class="token function">EmailDealWith</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>            ok <span class="token operator">:=</span> <span class="token boolean">false</span>            <span class="token keyword">var</span> s <span class="token builtin">string</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>                s<span class="token punctuation">,</span> ok <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>                s <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>args<span class="token operator">...</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment">// find the @ symbol</span>            substrs <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"@"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>substrs<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> s            <span class="token punctuation">}</span>            <span class="token comment">// replace the @ by " at "</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>substrs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" at "</span> <span class="token operator">+</span> substrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            f1 <span class="token operator">:=</span> Friend<span class="token punctuation">{</span>Fname<span class="token punctuation">:</span> <span class="token string">"minux.ma"</span><span class="token punctuation">}</span>f2 <span class="token operator">:=</span> Friend<span class="token punctuation">{</span>Fname<span class="token punctuation">:</span> <span class="token string">"xushiwei"</span><span class="token punctuation">}</span>            t <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"fieldname example"</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">{</span><span class="token string">"emailDeal"</span><span class="token punctuation">:</span> EmailDealWith<span class="token punctuation">}</span><span class="token punctuation">)</span>            t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">`hello {{.UserName}}!                    {{range .Emails}}                        an emails {{.|emailDeal}}                    {{end}}                    {{with .Friends}}                    {{range .}}                        my friend name is {{.Fname}}                    {{end}}                    {{end}}                    `</span><span class="token punctuation">)</span>            p <span class="token operator">:=</span> Person<span class="token punctuation">{</span>UserName<span class="token punctuation">:</span> <span class="token string">"Astaxie"</span><span class="token punctuation">,</span>                Emails<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"astaxie@beego.me"</span><span class="token punctuation">,</span> <span class="token string">"astaxie@gmail.com"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                Friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Friend<span class="token punctuation">{</span><span class="token operator">&amp;</span>f1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f2<span class="token punctuation">}</span><span class="token punctuation">}</span>            t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> p<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面演示了如何自定义函数，在模板包内部已经有内置的实现函数，下面代码截取自模板包里面。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> builtins <span class="token operator">=</span> FuncMap<span class="token punctuation">{</span>    <span class="token string">"and"</span><span class="token punctuation">:</span>     and<span class="token punctuation">,</span>    <span class="token string">"call"</span><span class="token punctuation">:</span>    call<span class="token punctuation">,</span>    <span class="token string">"html"</span><span class="token punctuation">:</span>    HTMLEscaper<span class="token punctuation">,</span>    <span class="token string">"index"</span><span class="token punctuation">:</span>   index<span class="token punctuation">,</span>    <span class="token string">"js"</span><span class="token punctuation">:</span>      JSEscaper<span class="token punctuation">,</span>    <span class="token string">"len"</span><span class="token punctuation">:</span>     length<span class="token punctuation">,</span>    <span class="token string">"not"</span><span class="token punctuation">:</span>     not<span class="token punctuation">,</span>    <span class="token string">"or"</span><span class="token punctuation">:</span>      or<span class="token punctuation">,</span>    <span class="token string">"print"</span><span class="token punctuation">:</span>   fmt<span class="token punctuation">.</span>Sprint<span class="token punctuation">,</span>    <span class="token string">"printf"</span><span class="token punctuation">:</span>   fmt<span class="token punctuation">.</span>Sprintf<span class="token punctuation">,</span>    <span class="token string">"println"</span><span class="token punctuation">:</span>  fmt<span class="token punctuation">.</span>Sprintln<span class="token punctuation">,</span>    <span class="token string">"urlquery"</span><span class="token punctuation">:</span> URLQueryEscaper<span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义函数<br>模板对象t的函数字典加入 funcMap 内的键值对。funcMap 某个值不是函数类型，或该函数类型不符合要求，会 panic 。返回 <code>*Template</code> 便于链式调用。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Template<span class="token punctuation">)</span> <span class="token function">Funcs</span><span class="token punctuation">(</span>funcMap FuncMap<span class="token punctuation">)</span> <span class="token operator">*</span>Template<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>FuncMap 映射函数要求 1 或 2 个返回值，第 2 个为error，非 nil 会中断并返回给调用者。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> FuncMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"html/template"</span><span class="token string">"io/ioutil"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token comment">//没参数</span><span class="token keyword">return</span> <span class="token string">"Welcome"</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Doing</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token comment">//有参数</span><span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">", Learning Go Web template "</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>htmlByte<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"./funcs.html"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"read html failed, err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// 自定义一个匿名模板函数</span>loveGo <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"欢迎一起学习《Go Web编程实战派从入门到精通》"</span><span class="token punctuation">}</span><span class="token comment">// 采用链式操作在Parse()方法之前调用Funcs添加自定义的loveGo函数</span>tmpl1<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"funcs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">{</span><span class="token string">"loveGo"</span><span class="token punctuation">:</span> loveGo<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>htmlByte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"create template failed, err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>funcMap <span class="token operator">:=</span> template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">{</span><span class="token comment">//在FuncMap中声明相应要使用的函数，然后就能够在template字符串中使用该函数</span><span class="token string">"Welcome"</span><span class="token punctuation">:</span> Welcome<span class="token punctuation">,</span><span class="token string">"Doing"</span><span class="token punctuation">:</span>   Doing<span class="token punctuation">,</span><span class="token punctuation">}</span>name <span class="token operator">:=</span> <span class="token string">"Shirdon"</span>tmpl2<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>funcMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"{{Welcome}}&lt;br/&gt;{{Doing .}}"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 使用user渲染模板，并将结果写入w</span>tmpl1<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> name<span class="token punctuation">)</span>tmpl2<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> sayHello<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8087"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>funcs.html</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;&lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;&lt;title&gt;tmpl test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;{{loveGo}}&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Must操作"><a class="header-anchor" href="#Must操作">☃</a>Must操作</h3><p>模板包里面有一个函数 Must ，它的作用是检测模板是否正确，例如大括号是否匹配、注释是否正确关闭、变量是否正确书写。接下来我们演示一个例子，用 Must 来判断模板是否正确。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">    <span class="token keyword">package</span> main    <span class="token keyword">import</span> <span class="token punctuation">(</span>        <span class="token string">"fmt"</span>        <span class="token string">"text/template"</span>    <span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tOk <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span>        template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>tOk<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">" some static text /* and a comment */"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"The first one parsed OK."</span><span class="token punctuation">)</span>        template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>"some    static    text<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span>Name <span class="token punctuation">}</span><span class="token punctuation">}</span>"<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"The second one parsed OK."</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"The next one ought to fail."</span><span class="token punctuation">)</span>        tErr <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"check parse error with Must"</span><span class="token punctuation">)</span>        template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>tErr<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">" some static text {{ .Name }"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套模板"><a class="header-anchor" href="#嵌套模板">☃</a>嵌套模板</h3><h3 id="模板的嵌套template"><a class="header-anchor" href="#模板的嵌套template">☃</a>模板的嵌套template</h3><p>模板嵌套<br>可以通过文件嵌套和 define 定义</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span>define <span class="token string">"name"</span><span class="token punctuation">}</span><span class="token punctuation">}</span> T <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span>template <span class="token string">"name"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>template <span class="token string">"name"</span> pipeline<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span>block <span class="token string">"name"</span> pipeline<span class="token punctuation">}</span><span class="token punctuation">}</span> T <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//等价于</span><span class="token punctuation">{</span><span class="token punctuation">{</span>define <span class="token string">"name"</span><span class="token punctuation">}</span><span class="token punctuation">}</span> T <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>template <span class="token string">"name"</span> pipeline<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>t.html</p><pre class="line-numbers language-tmpl" data-language="tmpl"><code class="language-tmpl">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;    &lt;title&gt;tmpl test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;测试嵌套template语法&lt;/h1&gt;&lt;hr&gt;{{template "ul.html"}}&lt;hr&gt;{{template "ol.html"}}&lt;/body&gt;&lt;/html&gt;{{define "ol.html"}}&lt;h1&gt;这是ol.html&lt;/h1&gt;&lt;ol&gt;    &lt;li&gt;I love Go&lt;/li&gt;    &lt;li&gt;I love java&lt;/li&gt;    &lt;li&gt;I love c&lt;/li&gt;&lt;/ol&gt;{{end}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ui.tmpl</p><pre class="line-numbers language-tmpl" data-language="tmpl"><code class="language-tmpl">&lt;ul&gt;    &lt;li&gt;注释&lt;/li&gt;    &lt;li&gt;日志&lt;/li&gt;    &lt;li&gt;测试&lt;/li&gt;&lt;/ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"html/template"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token comment">//定义一个UserInfo结构体</span><span class="token keyword">type</span> UserInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>Name <span class="token builtin">string</span>Gender <span class="token builtin">string</span>Age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">tmplSample</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>tmpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./t.html"</span><span class="token punctuation">,</span> <span class="token string">"./ul.html"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"create template failed, err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>user <span class="token operator">:=</span> UserInfo<span class="token punctuation">{</span>Name<span class="token punctuation">:</span>   <span class="token string">"张三"</span><span class="token punctuation">,</span>Gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>Age<span class="token punctuation">:</span>    <span class="token number">28</span><span class="token punctuation">,</span><span class="token punctuation">}</span>tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> user<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> tmplSample<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8087"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在 <code>template</code> 中嵌套其他的 <code>template</code> ，这个 <code>template</code> 可以是单独的文件，也可以是通过<code>define</code>定义的 <code>template</code>。</p><p>举个例子： <code>t.tmpl</code> 文件内容如下：</p><pre class="line-numbers language-tmpl" data-language="tmpl"><code class="language-tmpl">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;tmpl test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;   &lt;h1&gt;测试嵌套template语法&lt;/h1&gt; &lt;hr&gt; {{template "ul.tmpl"}} &lt;hr&gt; {{template "ol.tmpl"}}&lt;/body&gt;&lt;/html&gt; {{ define "ol.tmpl"}}&lt;ol&gt; &lt;li&gt;吃饭&lt;/li&gt; &lt;li&gt;睡觉&lt;/li&gt; &lt;li&gt;打豆豆&lt;/li&gt;&lt;/ol&gt;{{end}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ul.tmpl</code> 文件内容如下：</p><pre class="line-numbers language-tmpl" data-language="tmpl"><code class="language-tmpl">&lt;ul&gt; &lt;li&gt;注释&lt;/li&gt; &lt;li&gt;日志&lt;/li&gt; &lt;li&gt;测试&lt;/li&gt;&lt;/ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册一个 <code>templDemo</code> 路由处理函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/tmpl"</span><span class="token punctuation">,</span> tmplDemo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>tmplDemo</code> 函数的具体内容如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">tmplDemo</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span> tmpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./t.tmpl"</span><span class="token punctuation">,</span> <span class="token string">"./ul.tmpl"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"create template failed, err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">}</span> user <span class="token operator">:=</span> UserInfo<span class="token punctuation">{</span> Name<span class="token punctuation">:</span>   <span class="token string">"小王子"</span><span class="token punctuation">,</span> Gender<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span>    <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在解析模板时，被嵌套的模板一定要在后面解析，例如上面的示例中 <code>t.tmpl</code> 模板中嵌套了 <code>ul.tmpl</code> ，所以 <code>ul.tmpl</code> 要在 <code>t.tmpl</code> 后进行解析。</p></blockquote><p>在开发 Web 应用的时候，经常会遇到一些模板有些部分是固定不变的，可以抽取出来作为一个独立的部分，例如一个博客的头部和尾部是不变的，而唯一改变的是中间的内容部分。所以可以定义成 header、content、footer 三个部分，Go 语言通过如下的语法来申明。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span>define <span class="token string">"子模板名称"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>内容<span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过如下方式来调用。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span>template <span class="token string">"子模板名称"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来演示如何使用嵌套模板，定义三个文件，<code>header.tmpl 、content.tmpl 、footer.tmpl</code> 文件，内容如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">        <span class="token comment">//header.tmpl</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>define <span class="token string">"header"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>演示信息<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token comment">//content.tmpl</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>define <span class="token string">"content"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>template <span class="token string">"header"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>演示嵌套<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>嵌套使用define定义子模板<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>调用使用template<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>template <span class="token string">"footer"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token comment">//footer.tmpl</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>define <span class="token string">"footer"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>演示代码如下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span>    <span class="token string">"os"</span>    <span class="token string">"text/template"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"header.tmpl"</span><span class="token punctuation">,</span> <span class="token string">"content.tmpl"</span><span class="token punctuation">,</span> <span class="token string">"footer.tmpl"</span><span class="token punctuation">)</span>    s1<span class="token punctuation">.</span><span class="token function">ExecuteTemplate</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    s1<span class="token punctuation">.</span><span class="token function">ExecuteTemplate</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    s1<span class="token punctuation">.</span><span class="token function">ExecuteTemplate</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">"footer"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    s1<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>template.ParseFiles() 函数把所有的嵌套模板全部解析到模板里面，其实每一个定义的 <code>{{define}}</code> 都是一个独立的模板，它们相互独立，是并行存在的关系，内部存储的是类似 map 的一种关系（key 是模板的名称，value 是模板的内容）</p></li><li><p>通过 ExecuteTemplate() 函数来执行相应的子模板内容，可以看到 header 、footer 都是相对独立的，都能输出内容，contenrt 中因为嵌套了 header 和 footer 的内容，就会同时输出三个的内容</p></li><li><p>当执行 s1.Execute() 函数后，却没有任何输出，因为在默认的情况下，没有默认的子模板，所以不会输出任何的东西</p></li></ul><blockquote><p>注：同一个集合类的模板是互相知晓的，如果同一模板被多个集合使用，则它需要在多个集合中分别解析。</p></blockquote><h3 id="block"><a class="header-anchor" href="#block">☃</a>block</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span>block <span class="token string">"name"</span> pipeline<span class="token punctuation">}</span><span class="token punctuation">}</span> T1 <span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>block</code> 是定义模板 <code>{{define "name"}} T1 {{end}}</code> 和执行 <code>{{template "name" pipeline}}</code> 缩写，典型的用法是定义一组根模板，然后通过在其中重新定义块模板进行自定义。</p><p>定义一个根模板 <code>templates/base.tmpl</code> ，内容如下：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;title&gt;Go Templates&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="container-fluid"&gt; {{block "content" . }}{{end}}&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后定义一个 <code>templates/index.tmpl</code> ，”继承” <code>base.tmpl</code>：</p><pre class="line-numbers language-tmpl" data-language="tmpl"><code class="language-tmpl">{{template "base.tmpl"}}{{define "content"}} &lt;div&gt;Hello world!&lt;/div&gt;{{end}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用 <code>template.ParseGlob</code> 按照正则匹配规则解析模板文件，然后通过 <code>ExecuteTemplate</code> 渲染指定的模板：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">index</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">{</span> tmpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseGlob</span><span class="token punctuation">(</span><span class="token string">"templates/*.tmpl"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"create template failed, err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">}</span> err <span class="token operator">=</span> tmpl<span class="token punctuation">.</span><span class="token function">ExecuteTemplate</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"index.tmpl"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"render template failed, err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果定义的模板名称冲突了，例如不同业务线下都定义了一个 <code>index.tmpl</code> 模板，可以通过下面两种方法来解决。</p><ol><li>在模板文件开头使用<code>{{define 模板名}}</code>语句显式的为模板命名。</li><li>可以把模板文件存放在<code>templates</code>文件夹下面的不同目录中，然后使用<code>template.ParseGlob("templates/**/*.tmpl")</code>解析模板。</li></ol><h3 id="修改默认的标识符"><a class="header-anchor" href="#修改默认的标识符">☃</a>修改默认的标识符</h3><p>Go 语言标准库的模板引擎使用的花括号 <code>{{` 和 `}}</code> 作为标识，而许多前端框架（如<code>Vue</code> 和  <code>AngularJS</code>）也使用 <code>{{` 和 `}}</code> 作为标识符，所以当同时使用 Go 语言模板引擎和以上前端框架时就会出现冲突，这个时候我们需要修改标识符，修改前端的或者修改 Go 语言的。这里演示如何修改 Go 语言模板引擎默认的标识符：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delims</span><span class="token punctuation">(</span><span class="token string">"{["</span><span class="token punctuation">,</span> <span class="token string">"]}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./t.tmpl"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后我们在渲染的时候</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;自定义模板函数&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;姓名: {[.Name]}&lt;/h1&gt;&lt;h1&gt;性别: {[.Gender]}&lt;/h1&gt;&lt;h1&gt;年龄: {[.Age]}&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后运行结果，发现也能够正常显示</p><h2 id="text-template与html-tempalte的区别"><a class="header-anchor" href="#text-template与html-tempalte的区别">☃</a>text/template与html/tempalte的区别</h2><p><code>html/template</code> 针对的是需要返回 HTML 内容的场景，在模板渲染过程中会对一些有风险的内容进行转义，以此来防范跨站脚本攻击。</p><p>例如，定义下面的模板文件：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;&lt;body&gt; {{.}}&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候传入一段 JS 代码并使用<code>html/template</code> 去渲染该文件，会在页面上显示出转义后的 JS 内容。  <code>alert('嘿嘿嘿')</code>  这就是 <code>html/template</code> 要做的事。</p><p>但是在某些场景下，如果相信用户输入的内容，不想转义的话，可以自行编写一个 safe 函数，手动返回一个 <code>template.HTML</code> 类型的内容。示例如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">xss</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">{</span> tmpl<span class="token punctuation">,</span>err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"xss.tmpl"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">{</span> <span class="token string">"safe"</span><span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span>template<span class="token punctuation">.</span>HTML <span class="token punctuation">{</span> <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"./xss.tmpl"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"create template failed, err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">}</span> jsStr <span class="token operator">:=</span> <span class="token string">`&lt;script&gt;alert('嘿嘿嘿')&lt;/script&gt;`</span> err <span class="token operator">=</span> tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> jsStr<span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样只需要在模板文件不需要转义的内容后面使用我们定义好的 safe 函数就可以了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span> <span class="token operator">|</span> safe <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Go Web 编程开发系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Go Web </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown 语法</title>
      <link href="/posts/62652.html"/>
      <url>/posts/62652.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="MarkDown-概述"><a class="header-anchor" href="#MarkDown-概述">☃</a>MarkDown 概述</h2><hr><h3 id="宗旨"><a class="header-anchor" href="#宗旨">☃</a>宗旨</h3><p><strong>MarkDown</strong> 的目标是实现「易读易写」。</p><p>一份使用 MarkDown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。</p><h3 id="兼容-HTML"><a class="header-anchor" href="#兼容-HTML">☃</a>兼容 HTML</h3><p><strong>MarkDown</strong> 语法的目标是：成为一种适用于网络的书写语言。</p><p>MarkDown 的构想不是要使得 HTML 文档更容易书写。MarkDown 的设计理念是，能让文档更容易读、写和随意改。</p><hr><h2 id="标题"><a class="header-anchor" href="#标题">☃</a>标题</h2><hr><p>MarkDown 标题有两种格式：</p><ol><li>使用 <strong>=</strong> 和 <strong>-</strong> 标记一级和二级标题。</li></ol><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important">我展示的是一级标题<span class="token punctuation">=================</span></span><span class="token title important">我展示的是二级标题<span class="token punctuation">-----------------</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</li></ol><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 三级标题</span><span class="token title important"><span class="token punctuation">####</span> 四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 五级标题</span><span class="token title important"><span class="token punctuation">######</span> 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="段落与文本换行"><a class="header-anchor" href="#段落与文本换行">☃</a>段落与文本换行</h2><hr><p>Markdown 段落没有特殊的格式,直接编写文字, 段落换行是使用两个以上的空格加上回车/使用一个空行重新开始一个新的段落/使用 HTML 标签 <code>&lt;br&gt;</code> 。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 段落 (两个空格+回车)  <span class="token list punctuation">2.</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span> 段落 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">&gt;</span></span>（使用 HTML 语言换行标签）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="文本添加缩进"><a class="header-anchor" href="#文本添加缩进">☃</a>文本添加缩进</h2><hr><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">#使用 HTML 标签 &lt;style&gt; 实现&lt;p style="text-indent:1em"&gt;你好呀&lt;/p&gt;&lt;p style="text-indent:2em"&gt;你好呀&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p style="text-indent:1em">你好呀</p><p style="text-indent:2em">你好呀</p><hr><h2 id="字体"><a class="header-anchor" href="#字体">☃</a>字体</h2><hr><p>MarkDown 可以使用以下几种字体：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体文本</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">粗体文本</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">粗斜体文本</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="高亮"><a class="header-anchor" href="#高亮">☃</a>高亮</h2><hr><p>MarkDown 使用连续两个单号包括高亮的部分实现内容的高亮。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">==高亮内容==<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="分割线"><a class="header-anchor" href="#分割线">☃</a>分割线</h2><hr><p>在一行中用三个以上的 <strong>星号</strong>、<strong>减号</strong>、<strong>底线</strong> 来建立一个分隔线，行内不能有其他东西或在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> ***<span class="token hr punctuation">- ---</span><span class="token list punctuation">-</span> ···<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="删除线"><a class="header-anchor" href="#删除线">☃</a>删除线</h2><hr><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线即可。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">~~delete<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="下划线"><a class="header-anchor" href="#下划线">☃</a>下划线</h2><hr><p>下划线可以通过 <strong>HTML</strong> 的标签来实现。</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;u&gt;带下划线文本&lt;/u&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="注释"><a class="header-anchor" href="#注释">☃</a>注释</h2><hr><p>使用 <strong>HTML</strong> 的注释方式。</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!-- 注释 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="脚注"><a class="header-anchor" href="#脚注">☃</a>脚注</h2><hr><p>脚注是对文本的补充说明，MarkDown 脚注标识可以为字母数字下划线，但是暂不支持中文。脚注内容可为任意字符，包括中文。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">创建脚注格式 [^1] [^1] : 菜鸟教程 -- 学的不仅是技术，更是梦想!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="文本居中"><a class="header-anchor" href="#文本居中">☃</a>文本居中</h2><hr><p>使用 <strong>HTML</strong> 可以将文本居中。</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;center&gt;居中的内容&lt;/center&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="列表"><a class="header-anchor" href="#列表">☃</a>列表</h2><hr><p>MarkDown 支持有序列表和无序列表。</p><ul><li>有序列表</li></ul><p>有序列表使用数字并加上 <strong>.</strong> 号来表示。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一项<span class="token list punctuation">2.</span> 第二项<span class="token list punctuation">3.</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>无序列表</li></ul><p>无序列表使用 <strong>星号</strong> （ <code>*</code> ）、<strong>加号</strong> （ <code>+</code> ）或是 <strong>减号</strong> （ <code>-</code> ）作为列表标记。</p> <pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一项<span class="token list punctuation">*</span> 第二项<span class="token list punctuation">*</span> 第三项------ 分割线 ------<span class="token list punctuation">-</span> 第一项<span class="token list punctuation">-</span> 第二项<span class="token list punctuation">-</span> 第三项------ 分割线 ------<span class="token list punctuation">+</span> 第一项<span class="token list punctuation">+</span> 第二项<span class="token list punctuation">+</span> 第三项  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="区块"><a class="header-anchor" href="#区块">☃</a>区块</h2><hr><ol><li>区块引用</li></ol><p>MarkDown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟 <strong>一个空格符号</strong> 。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span> 区块引用<span class="token blockquote punctuation">&gt;</span> 菜鸟教程<span class="token blockquote punctuation">&gt;</span> 学的不仅是技术更是梦想<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>区块使用列表</li></ol><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span> 区块中使用列表<span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">1.</span> 第一项<span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">2.</span> 第二项<span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">+</span> 第一项<span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">+</span> 第二项<span class="token blockquote punctuation">&gt;</span> <span class="token list punctuation">+</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>列表中使用区块</li></ol><p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一项  &gt; 菜鸟教程    &gt; 学的不仅是技术更是梦想<span class="token list punctuation">*</span> 第二项     &gt;欢迎光临<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="代码与代码块"><a class="header-anchor" href="#代码与代码块">☃</a>代码与代码块</h2><hr><ol><li>单行代码</li></ol><p>如果是单行代码或段落上的一个函数或片段的代码可以用 <strong>反引号对</strong> 把它括起来。</p><p><code>fmt.Println("Hello Word!)</code></p><ol start="2"><li>代码区块</li></ol><p>代码区块使用 <strong>三个反引号对</strong> 包裹一段代码，并指定一种语言（也可以不指定）。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="上标与下标"><a class="header-anchor" href="#上标与下标">☃</a>上标与下标</h2><hr><ol><li>上标使用双 <strong>^</strong> 括住内容</li></ol><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">x^2^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>下标使用双 <strong>~</strong> 括住内容</li></ol><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">H2<span class="token strike"><span class="token punctuation">~</span><span class="token content">0</span><span class="token punctuation">~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="超链接"><a class="header-anchor" href="#超链接">☃</a>超链接</h2><hr><ul><li><p>一个方括号 <strong>[]</strong> ，里面放上链接的替代文字</p></li><li><p>接着一个普通括号 <strong>()</strong> ，里面放上网址</p></li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">链接也可以用变量来代替，文档末尾附带变量地址：这个链接用 1 作为网址变量 <span class="token url">[<span class="token content">Google</span>][<span class="token variable">1</span>]</span>这个链接用 baidu 作为网址变量 <span class="token url">[<span class="token content">百度</span>][<span class="token variable">baidu</span>]</span>然后在文档的结尾为变量赋值（网址）[1]:http://www.google.com/[baidu]:http://www.baidu.com/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="插入图片"><a class="header-anchor" href="#插入图片">☃</a>插入图片</h2><hr><ul><li><p>开头一个 感叹号 <strong>!</strong></p></li><li><p>接着一个 方括号 <strong>[]</strong> ，里面放上图片的替代文字</p></li><li><p>接着一个 普通括号 <strong>()</strong> ，里面放上图片的网址，最后还可以用 <strong>引号</strong> 包住并加上选择性的 <strong>title</strong> 属性的文字</p></li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">图片</span>](<span class="token url">http://xxx.com/xxx.png</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><img src="https://tao7app.files.wordpress.com/2022/12/img_20221210_145354.jpg" alt="图片"></p><hr><h2 id="设置图片"><a class="header-anchor" href="#设置图片">☃</a>设置图片</h2><hr><p>通过 center 居中，把 center 换成 left 和 right 可以实现居左或者居右，width 和 height 调控高度和宽度。</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div align=center&gt;&lt;img src="http://pic11.photophoto.cn/20090626/0036036341009653_b.jpg" width="251" height="350"&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><div align="center"><img src="http://pic11.photophoto.cn/20090626/0036036341009653_b.jpg" width="251" height="350"></div><hr><hr><h2 id="插入视频"><a class="header-anchor" href="#插入视频">☃</a>插入视频</h2><hr><p>插入视频实现依赖于 <strong>HTML</strong> 。</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;video controls="" autoplay="" name="media"&gt;    &lt;source src="https://www.w3school.com.cn/example/html5/mov_bbb.mp4" type="video/mp4"&gt;&lt;/video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p><video controls="" autoplay="" name="media">    <source src="https://www.w3school.com.cn/example/html5/mov_bbb.mp4" type="video/mp4"><br></video></p><hr><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;iframe    width=100%    height=120px    src='//player.bilibili.com/player.html?aid=455564468&amp;bvid=BV1H541147nA&amp;cid=187808769&amp;page=1'    frameborder="0"    allowfullscreen&gt;&lt;/iframe&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><iframe width="100%" height="120px" src="//player.bilibili.com/player.html?aid=455564468&amp;bvid=BV1H541147nA&amp;cid=187808769&amp;page=1" frameborder="0" allowfullscreen=""></iframe><hr><ul><li><p>src 里面填视频原 URL</p></li><li><p>width 是视频宽度（可以填百分比）</p></li><li><p>height 是视频高度（可以填百分比）</p></li></ul><hr><h2 id="插入音乐"><a class="header-anchor" href="#插入音乐">☃</a>插入音乐</h2><hr><p>插入音乐实现依赖于 <strong>HTML</strong> 。</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div align=center&gt;&lt;iframe frameborder="no" marginwidth="0" marginheight="0" width=300 height=90 src="https://music.163.com/outchain/player?type=2&amp;id=34341360&amp;auto=0&amp;height=66"&gt;&lt;/iframe&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><div align="center"><iframe frameborder="no" marginwidth="0" marginheight="0" width="300" height="90" src="https://music.163.com/outchain/player?type=2&amp;id=34341360&amp;auto=0&amp;height=66"></iframe></div><ul><li><p>div 用于控制格式，若无则默认为居左</p></li><li><p>frameborder 用于规定是否显示框架周围的边框，1 为是，0 为否</p></li><li><p>marginwidth 及 marginheight 表示距离边缘的像素大小</p></li><li><p>width 及 height 表示播放条的长度和宽度 src 为播放链接，可以在如网易云音乐的生成外链播放器获取该链接，同时也获得以下代码，并可以自行更改；也可将音频链接改为视频链接，从而播放视频</p></li></ul><hr><h2 id="插入表格"><a class="header-anchor" href="#插入表格">☃</a>插入表格</h2><hr><p>输入 <code>|</code> 表头1 <code>|</code> 表头2 <code>|</code> 并回车,即可创建一个包含 2 列表。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> 左对齐 </span><span class="token punctuation">|</span><span class="token table-header important"> 右对齐 </span><span class="token punctuation">|</span><span class="token table-header important"> 中对齐 </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span> <span class="token punctuation">:----</span> <span class="token punctuation">|</span> <span class="token punctuation">----:</span> <span class="token punctuation">|</span> <span class="token punctuation">:---:</span> <span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格 </span><span class="token punctuation">|</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>第一行为表头，第二行为分割表头和主体部分，第三行开始每一行为一个表格行。</p></li><li><p>列与列之间用管道符号 <code>|</code> 隔开，如果不使用对齐标记，内容默认左对齐，表头居中对齐</p></li></ul><hr><blockquote><p>-: 设置内容和标题栏居右对齐</p></blockquote><blockquote><p>:- 设置内容和标题栏居左对齐</p></blockquote><blockquote><p>:-: 设置内容和标题栏居中对齐</p></blockquote><hr><ul><li><p>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 <code>|</code> 来标记单元格边界</p></li><li><p>为了使 MarkDown 更清晰，<code>|</code> 和 <code>-</code> 两侧需要至少有一个空格（最左侧和最右侧的 <code>|</code> 外不需要）</p></li></ul><hr><h2 id="MarkDown-编写博文的更多技巧"><a class="header-anchor" href="#MarkDown-编写博文的更多技巧">☃</a>MarkDown 编写博文的更多技巧</h2><hr><h3 id="1-支持-HTML-元素"><a class="header-anchor" href="#1-支持-HTML-元素">☃</a>1. 支持 HTML 元素</h3><p>不在 MarkDown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><h3 id="2-转义"><a class="header-anchor" href="#2-转义">☃</a>2. 转义</h3><p>MarkDown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，MarkDown 使用反斜杠转义特殊字符。</p><p>MarkDown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号:</p><hr><ul><li><strong>\ 反斜线</strong></li><li><strong>` 反引号</strong></li><li><strong>星号 [*]</strong></li><li><strong>下划线</strong></li><li><strong>{} 花括号</strong></li><li><strong>[] 方括号</strong></li><li><strong>() 小括号</strong></li><li><strong># 井字号</strong></li><li><strong>+ 加号</strong></li><li><strong>- 减号</strong></li><li><strong>. 英文句点</strong></li><li><strong>! 感叹号</strong></li></ul><hr><h2 id="文字颜色、大小、字体背景色"><a class="header-anchor" href="#文字颜色、大小、字体背景色">☃</a>文字颜色、大小、字体背景色</h2><hr><h3 id="1-字体大小"><a class="header-anchor" href="#1-字体大小">☃</a>1. 字体大小</h3><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">size为1：&lt;font size="1"&gt;size为1&lt;/font&gt;                                     size为3：&lt;font size="3"&gt;size为3&lt;/font&gt;size为4：&lt;font size="4"&gt;size为4&lt;/font&gt;size为6：&lt;font size="6"&gt;size为6&lt;/font&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>size为1：<font size="1">size为1</font></p><p>size为3：<font size="3">size为3</font></p><p>size为4：<font size="4">size为4</font></p><p>size为6：<font size="6">size为6</font></p><hr><h3 id="2-颜色"><a class="header-anchor" href="#2-颜色">☃</a>2.颜色</h3><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;font color="#dd0000"&gt;文字颜色&lt;/font&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><font color="#dd0000">文字颜色</font></p><hr><h3 id="3-背景色"><a class="header-anchor" href="#3-背景色">☃</a>3.背景色</h3><p>MarkDown 本身不支持背景色设置，需要采用内置 HTMML 的方式实现：借助 <code>table</code> , <code>tr</code> , <code>td</code> 等表格标签的 bgcolor 属性来实现背景色的功能。</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt;背景色是：orange&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#FF00FF&gt;背景色的设置是按照十六进制颜色值：#7FFFD4&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#FF83FA&gt;背景色的设置是按照十六进制颜色值：#FF83FA&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#D1EEEE&gt;背景色的设置是按照十六进制颜色值：#D1EEEE&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#C0FF3E&gt;背景色的设置是按照十六进制颜色值：#C0FF3E&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#54FF9F&gt;背景色的设置是按照十六进制颜色值：#54FF9F&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><table><tbody><tr><td bgcolor="orange">背景色是：orange</td></tr></tbody></table><table><tbody><tr><td bgcolor="#FF00FF">背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></tbody></table><table><tbody><tr><td bgcolor="#FF83FA">背景色的设置是按照十六进制颜色值：#FF83FA</td></tr></tbody></table><table><tbody><tr><td bgcolor="#D1EEEE">背景色的设置是按照十六进制颜色值：#D1EEEE</td></tr></tbody></table><table><tbody><tr><td bgcolor="#C0FF3E">背景色的设置是按照十六进制颜色值：#C0FF3E</td></tr></tbody></table><table><tbody><tr><td bgcolor="#54FF9F">背景色的设置是按照十六进制颜色值：#54FF9F</td></tr></tbody></table><hr><hr><h2 id="使用-LaTex-数学公式"><a class="header-anchor" href="#使用-LaTex-数学公式">☃</a>使用 LaTex 数学公式</h2><hr><h3 id="1-行内公式"><a class="header-anchor" href="#1-行内公式">☃</a>1.行内公式</h3><p>使用两个 <strong>$</strong> 符号引用公式。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">$公式$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-行间公式"><a class="header-anchor" href="#2-行间公式">☃</a>2.行间公式</h3><p>使用两对 <strong>$$</strong> 符号引用公式。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">$$公式$$ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <a href="https://www.mathjax.org/">MarkDown 数学符号官网</a>使用中，详细介绍了一些常用的数学公式。</p><hr><p>参考 <a href="http://markdown.p2hp.com/basic-syntax/">MarkDown 中文网</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
